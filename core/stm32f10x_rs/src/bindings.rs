/* automatically generated by rust-bindgen 0.66.1 */

pub const __STM32F10X_STDPERIPH_VERSION_MAIN: u32 = 3;
pub const __STM32F10X_STDPERIPH_VERSION_SUB1: u32 = 5;
pub const __STM32F10X_STDPERIPH_VERSION_SUB2: u32 = 0;
pub const __STM32F10X_STDPERIPH_VERSION_RC: u32 = 0;
pub const __STM32F10X_STDPERIPH_VERSION: u32 = 50659328;
pub const __MPU_PRESENT: u32 = 0;
pub const __NVIC_PRIO_BITS: u32 = 4;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const __CM3_CMSIS_VERSION_MAIN: u32 = 1;
pub const __CM3_CMSIS_VERSION_SUB: u32 = 48;
pub const __CM3_CMSIS_VERSION: u32 = 65584;
pub const __CORTEX_M: u32 = 3;
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_RETTOBASE_Pos: u32 = 11;
pub const SCB_ICSR_RETTOBASE_Msk: u32 = 2048;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLBASE_Pos: u32 = 29;
pub const SCB_VTOR_TBLBASE_Msk: u64 = 274341036032;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 7;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 536870784;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_PRIGROUP_Pos: u32 = 8;
pub const SCB_AIRCR_PRIGROUP_Msk: u32 = 1792;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_AIRCR_VECTRESET_Pos: u32 = 0;
pub const SCB_AIRCR_VECTRESET_Msk: u32 = 1;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_BFHFNMIGN_Pos: u32 = 8;
pub const SCB_CCR_BFHFNMIGN_Msk: u32 = 256;
pub const SCB_CCR_DIV_0_TRP_Pos: u32 = 4;
pub const SCB_CCR_DIV_0_TRP_Msk: u32 = 16;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_CCR_USERSETMPEND_Pos: u32 = 1;
pub const SCB_CCR_USERSETMPEND_Msk: u32 = 2;
pub const SCB_CCR_NONBASETHRDENA_Pos: u32 = 0;
pub const SCB_CCR_NONBASETHRDENA_Msk: u32 = 1;
pub const SCB_SHCSR_USGFAULTENA_Pos: u32 = 18;
pub const SCB_SHCSR_USGFAULTENA_Msk: u32 = 262144;
pub const SCB_SHCSR_BUSFAULTENA_Pos: u32 = 17;
pub const SCB_SHCSR_BUSFAULTENA_Msk: u32 = 131072;
pub const SCB_SHCSR_MEMFAULTENA_Pos: u32 = 16;
pub const SCB_SHCSR_MEMFAULTENA_Msk: u32 = 65536;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SCB_SHCSR_BUSFAULTPENDED_Pos: u32 = 14;
pub const SCB_SHCSR_BUSFAULTPENDED_Msk: u32 = 16384;
pub const SCB_SHCSR_MEMFAULTPENDED_Pos: u32 = 13;
pub const SCB_SHCSR_MEMFAULTPENDED_Msk: u32 = 8192;
pub const SCB_SHCSR_USGFAULTPENDED_Pos: u32 = 12;
pub const SCB_SHCSR_USGFAULTPENDED_Msk: u32 = 4096;
pub const SCB_SHCSR_SYSTICKACT_Pos: u32 = 11;
pub const SCB_SHCSR_SYSTICKACT_Msk: u32 = 2048;
pub const SCB_SHCSR_PENDSVACT_Pos: u32 = 10;
pub const SCB_SHCSR_PENDSVACT_Msk: u32 = 1024;
pub const SCB_SHCSR_MONITORACT_Pos: u32 = 8;
pub const SCB_SHCSR_MONITORACT_Msk: u32 = 256;
pub const SCB_SHCSR_SVCALLACT_Pos: u32 = 7;
pub const SCB_SHCSR_SVCALLACT_Msk: u32 = 128;
pub const SCB_SHCSR_USGFAULTACT_Pos: u32 = 3;
pub const SCB_SHCSR_USGFAULTACT_Msk: u32 = 8;
pub const SCB_SHCSR_BUSFAULTACT_Pos: u32 = 1;
pub const SCB_SHCSR_BUSFAULTACT_Msk: u32 = 2;
pub const SCB_SHCSR_MEMFAULTACT_Pos: u32 = 0;
pub const SCB_SHCSR_MEMFAULTACT_Msk: u32 = 1;
pub const SCB_CFSR_USGFAULTSR_Pos: u32 = 16;
pub const SCB_CFSR_USGFAULTSR_Msk: u32 = 4294901760;
pub const SCB_CFSR_BUSFAULTSR_Pos: u32 = 8;
pub const SCB_CFSR_BUSFAULTSR_Msk: u32 = 65280;
pub const SCB_CFSR_MEMFAULTSR_Pos: u32 = 0;
pub const SCB_CFSR_MEMFAULTSR_Msk: u32 = 255;
pub const SCB_HFSR_DEBUGEVT_Pos: u32 = 31;
pub const SCB_HFSR_DEBUGEVT_Msk: u32 = 2147483648;
pub const SCB_HFSR_FORCED_Pos: u32 = 30;
pub const SCB_HFSR_FORCED_Msk: u32 = 1073741824;
pub const SCB_HFSR_VECTTBL_Pos: u32 = 1;
pub const SCB_HFSR_VECTTBL_Msk: u32 = 2;
pub const SCB_DFSR_EXTERNAL_Pos: u32 = 4;
pub const SCB_DFSR_EXTERNAL_Msk: u32 = 16;
pub const SCB_DFSR_VCATCH_Pos: u32 = 3;
pub const SCB_DFSR_VCATCH_Msk: u32 = 8;
pub const SCB_DFSR_DWTTRAP_Pos: u32 = 2;
pub const SCB_DFSR_DWTTRAP_Msk: u32 = 4;
pub const SCB_DFSR_BKPT_Pos: u32 = 1;
pub const SCB_DFSR_BKPT_Msk: u32 = 2;
pub const SCB_DFSR_HALTED_Pos: u32 = 0;
pub const SCB_DFSR_HALTED_Msk: u32 = 1;
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
pub const ITM_TPR_PRIVMASK_Pos: u32 = 0;
pub const ITM_TPR_PRIVMASK_Msk: u32 = 15;
pub const ITM_TCR_BUSY_Pos: u32 = 23;
pub const ITM_TCR_BUSY_Msk: u32 = 8388608;
pub const ITM_TCR_ATBID_Pos: u32 = 16;
pub const ITM_TCR_ATBID_Msk: u32 = 8323072;
pub const ITM_TCR_TSPrescale_Pos: u32 = 8;
pub const ITM_TCR_TSPrescale_Msk: u32 = 768;
pub const ITM_TCR_SWOENA_Pos: u32 = 4;
pub const ITM_TCR_SWOENA_Msk: u32 = 16;
pub const ITM_TCR_DWTENA_Pos: u32 = 3;
pub const ITM_TCR_DWTENA_Msk: u32 = 8;
pub const ITM_TCR_SYNCENA_Pos: u32 = 2;
pub const ITM_TCR_SYNCENA_Msk: u32 = 4;
pub const ITM_TCR_TSENA_Pos: u32 = 1;
pub const ITM_TCR_TSENA_Msk: u32 = 2;
pub const ITM_TCR_ITMENA_Pos: u32 = 0;
pub const ITM_TCR_ITMENA_Msk: u32 = 1;
pub const ITM_IWR_ATVALIDM_Pos: u32 = 0;
pub const ITM_IWR_ATVALIDM_Msk: u32 = 1;
pub const ITM_IRR_ATREADYM_Pos: u32 = 0;
pub const ITM_IRR_ATREADYM_Msk: u32 = 1;
pub const ITM_IMCR_INTEGRATION_Pos: u32 = 0;
pub const ITM_IMCR_INTEGRATION_Msk: u32 = 1;
pub const ITM_LSR_ByteAcc_Pos: u32 = 2;
pub const ITM_LSR_ByteAcc_Msk: u32 = 4;
pub const ITM_LSR_Access_Pos: u32 = 1;
pub const ITM_LSR_Access_Msk: u32 = 2;
pub const ITM_LSR_Present_Pos: u32 = 0;
pub const ITM_LSR_Present_Msk: u32 = 1;
pub const InterruptType_ICTR_INTLINESNUM_Pos: u32 = 0;
pub const InterruptType_ICTR_INTLINESNUM_Msk: u32 = 31;
pub const InterruptType_ACTLR_DISFOLD_Pos: u32 = 2;
pub const InterruptType_ACTLR_DISFOLD_Msk: u32 = 4;
pub const InterruptType_ACTLR_DISDEFWBUF_Pos: u32 = 1;
pub const InterruptType_ACTLR_DISDEFWBUF_Msk: u32 = 2;
pub const InterruptType_ACTLR_DISMCYCINT_Pos: u32 = 0;
pub const InterruptType_ACTLR_DISMCYCINT_Msk: u32 = 1;
pub const CoreDebug_DHCSR_DBGKEY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_DBGKEY_Msk: u32 = 4294901760;
pub const CoreDebug_DHCSR_S_RESET_ST_Pos: u32 = 25;
pub const CoreDebug_DHCSR_S_RESET_ST_Msk: u32 = 33554432;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Pos: u32 = 24;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Msk: u32 = 16777216;
pub const CoreDebug_DHCSR_S_LOCKUP_Pos: u32 = 19;
pub const CoreDebug_DHCSR_S_LOCKUP_Msk: u32 = 524288;
pub const CoreDebug_DHCSR_S_SLEEP_Pos: u32 = 18;
pub const CoreDebug_DHCSR_S_SLEEP_Msk: u32 = 262144;
pub const CoreDebug_DHCSR_S_HALT_Pos: u32 = 17;
pub const CoreDebug_DHCSR_S_HALT_Msk: u32 = 131072;
pub const CoreDebug_DHCSR_S_REGRDY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_S_REGRDY_Msk: u32 = 65536;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Pos: u32 = 5;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Msk: u32 = 32;
pub const CoreDebug_DHCSR_C_MASKINTS_Pos: u32 = 3;
pub const CoreDebug_DHCSR_C_MASKINTS_Msk: u32 = 8;
pub const CoreDebug_DHCSR_C_STEP_Pos: u32 = 2;
pub const CoreDebug_DHCSR_C_STEP_Msk: u32 = 4;
pub const CoreDebug_DHCSR_C_HALT_Pos: u32 = 1;
pub const CoreDebug_DHCSR_C_HALT_Msk: u32 = 2;
pub const CoreDebug_DHCSR_C_DEBUGEN_Pos: u32 = 0;
pub const CoreDebug_DHCSR_C_DEBUGEN_Msk: u32 = 1;
pub const CoreDebug_DCRSR_REGWnR_Pos: u32 = 16;
pub const CoreDebug_DCRSR_REGWnR_Msk: u32 = 65536;
pub const CoreDebug_DCRSR_REGSEL_Pos: u32 = 0;
pub const CoreDebug_DCRSR_REGSEL_Msk: u32 = 31;
pub const CoreDebug_DEMCR_TRCENA_Pos: u32 = 24;
pub const CoreDebug_DEMCR_TRCENA_Msk: u32 = 16777216;
pub const CoreDebug_DEMCR_MON_REQ_Pos: u32 = 19;
pub const CoreDebug_DEMCR_MON_REQ_Msk: u32 = 524288;
pub const CoreDebug_DEMCR_MON_STEP_Pos: u32 = 18;
pub const CoreDebug_DEMCR_MON_STEP_Msk: u32 = 262144;
pub const CoreDebug_DEMCR_MON_PEND_Pos: u32 = 17;
pub const CoreDebug_DEMCR_MON_PEND_Msk: u32 = 131072;
pub const CoreDebug_DEMCR_MON_EN_Pos: u32 = 16;
pub const CoreDebug_DEMCR_MON_EN_Msk: u32 = 65536;
pub const CoreDebug_DEMCR_VC_HARDERR_Pos: u32 = 10;
pub const CoreDebug_DEMCR_VC_HARDERR_Msk: u32 = 1024;
pub const CoreDebug_DEMCR_VC_INTERR_Pos: u32 = 9;
pub const CoreDebug_DEMCR_VC_INTERR_Msk: u32 = 512;
pub const CoreDebug_DEMCR_VC_BUSERR_Pos: u32 = 8;
pub const CoreDebug_DEMCR_VC_BUSERR_Msk: u32 = 256;
pub const CoreDebug_DEMCR_VC_STATERR_Pos: u32 = 7;
pub const CoreDebug_DEMCR_VC_STATERR_Msk: u32 = 128;
pub const CoreDebug_DEMCR_VC_CHKERR_Pos: u32 = 6;
pub const CoreDebug_DEMCR_VC_CHKERR_Msk: u32 = 64;
pub const CoreDebug_DEMCR_VC_NOCPERR_Pos: u32 = 5;
pub const CoreDebug_DEMCR_VC_NOCPERR_Msk: u32 = 32;
pub const CoreDebug_DEMCR_VC_MMERR_Pos: u32 = 4;
pub const CoreDebug_DEMCR_VC_MMERR_Msk: u32 = 16;
pub const CoreDebug_DEMCR_VC_CORERESET_Pos: u32 = 0;
pub const CoreDebug_DEMCR_VC_CORERESET_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const ITM_BASE: u32 = 3758096384;
pub const CoreDebug_BASE: u32 = 3758157296;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const ITM_RXBUFFER_EMPTY: u32 = 1520786085;
#[repr(i32)]
#[non_exhaustive]
#[doc = " @brief STM32F10x Interrupt Number Definition, according to the selected device\n        in @ref Library_configuration_section"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum IRQn {
    #[doc = "< 2 Non Maskable Interrupt"]
    NonMaskableInt_IRQn = -14,
    #[doc = "< 4 Cortex-M3 Memory Management Interrupt"]
    MemoryManagement_IRQn = -12,
    #[doc = "< 5 Cortex-M3 Bus Fault Interrupt"]
    BusFault_IRQn = -11,
    #[doc = "< 6 Cortex-M3 Usage Fault Interrupt"]
    UsageFault_IRQn = -10,
    #[doc = "< 11 Cortex-M3 SV Call Interrupt"]
    SVCall_IRQn = -5,
    #[doc = "< 12 Cortex-M3 Debug Monitor Interrupt"]
    DebugMonitor_IRQn = -4,
    #[doc = "< 14 Cortex-M3 Pend SV Interrupt"]
    PendSV_IRQn = -2,
    #[doc = "< 15 Cortex-M3 System Tick Interrupt"]
    SysTick_IRQn = -1,
    #[doc = "< Window WatchDog Interrupt"]
    WWDG_IRQn = 0,
    #[doc = "< PVD through EXTI Line detection Interrupt"]
    PVD_IRQn = 1,
    #[doc = "< Tamper Interrupt"]
    TAMPER_IRQn = 2,
    #[doc = "< RTC global Interrupt"]
    RTC_IRQn = 3,
    #[doc = "< FLASH global Interrupt"]
    FLASH_IRQn = 4,
    #[doc = "< RCC global Interrupt"]
    RCC_IRQn = 5,
    #[doc = "< EXTI Line0 Interrupt"]
    EXTI0_IRQn = 6,
    #[doc = "< EXTI Line1 Interrupt"]
    EXTI1_IRQn = 7,
    #[doc = "< EXTI Line2 Interrupt"]
    EXTI2_IRQn = 8,
    #[doc = "< EXTI Line3 Interrupt"]
    EXTI3_IRQn = 9,
    #[doc = "< EXTI Line4 Interrupt"]
    EXTI4_IRQn = 10,
    #[doc = "< DMA1 Channel 1 global Interrupt"]
    DMA1_Channel1_IRQn = 11,
    #[doc = "< DMA1 Channel 2 global Interrupt"]
    DMA1_Channel2_IRQn = 12,
    #[doc = "< DMA1 Channel 3 global Interrupt"]
    DMA1_Channel3_IRQn = 13,
    #[doc = "< DMA1 Channel 4 global Interrupt"]
    DMA1_Channel4_IRQn = 14,
    #[doc = "< DMA1 Channel 5 global Interrupt"]
    DMA1_Channel5_IRQn = 15,
    #[doc = "< DMA1 Channel 6 global Interrupt"]
    DMA1_Channel6_IRQn = 16,
    #[doc = "< DMA1 Channel 7 global Interrupt"]
    DMA1_Channel7_IRQn = 17,
    #[doc = "< ADC1 and ADC2 global Interrupt"]
    ADC1_2_IRQn = 18,
    #[doc = "< USB Device High Priority or CAN1 TX Interrupts"]
    USB_HP_CAN1_TX_IRQn = 19,
    #[doc = "< USB Device Low Priority or CAN1 RX0 Interrupts"]
    USB_LP_CAN1_RX0_IRQn = 20,
    #[doc = "< CAN1 RX1 Interrupt"]
    CAN1_RX1_IRQn = 21,
    #[doc = "< CAN1 SCE Interrupt"]
    CAN1_SCE_IRQn = 22,
    #[doc = "< External Line[9:5] Interrupts"]
    EXTI9_5_IRQn = 23,
    #[doc = "< TIM1 Break Interrupt"]
    TIM1_BRK_IRQn = 24,
    #[doc = "< TIM1 Update Interrupt"]
    TIM1_UP_IRQn = 25,
    #[doc = "< TIM1 Trigger and Commutation Interrupt"]
    TIM1_TRG_COM_IRQn = 26,
    #[doc = "< TIM1 Capture Compare Interrupt"]
    TIM1_CC_IRQn = 27,
    #[doc = "< TIM2 global Interrupt"]
    TIM2_IRQn = 28,
    #[doc = "< TIM3 global Interrupt"]
    TIM3_IRQn = 29,
    #[doc = "< TIM4 global Interrupt"]
    TIM4_IRQn = 30,
    #[doc = "< I2C1 Event Interrupt"]
    I2C1_EV_IRQn = 31,
    #[doc = "< I2C1 Error Interrupt"]
    I2C1_ER_IRQn = 32,
    #[doc = "< I2C2 Event Interrupt"]
    I2C2_EV_IRQn = 33,
    #[doc = "< I2C2 Error Interrupt"]
    I2C2_ER_IRQn = 34,
    #[doc = "< SPI1 global Interrupt"]
    SPI1_IRQn = 35,
    #[doc = "< SPI2 global Interrupt"]
    SPI2_IRQn = 36,
    #[doc = "< USART1 global Interrupt"]
    USART1_IRQn = 37,
    #[doc = "< USART2 global Interrupt"]
    USART2_IRQn = 38,
    #[doc = "< USART3 global Interrupt"]
    USART3_IRQn = 39,
    #[doc = "< External Line[15:10] Interrupts"]
    EXTI15_10_IRQn = 40,
    #[doc = "< RTC Alarm through EXTI Line Interrupt"]
    RTCAlarm_IRQn = 41,
    #[doc = "< USB Device WakeUp from suspend through EXTI Line Interrupt"]
    USBWakeUp_IRQn = 42,
}
#[doc = " @brief STM32F10x Interrupt Number Definition, according to the selected device\n        in @ref Library_configuration_section"]
pub use self::IRQn as IRQn_Type;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = ::core::ffi::c_longlong;
pub type uintmax_t = ::core::ffi::c_ulonglong;
#[doc = " @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC\nmemory mapped structure for Nested Vectored Interrupt Controller (NVIC)\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVIC_Type {
    #[doc = "< Offset: 0x000  Interrupt Set Enable Register"]
    pub ISER: [u32; 8usize],
    pub RESERVED0: [u32; 24usize],
    #[doc = "< Offset: 0x080  Interrupt Clear Enable Register"]
    pub ICER: [u32; 8usize],
    pub RSERVED1: [u32; 24usize],
    #[doc = "< Offset: 0x100  Interrupt Set Pending Register"]
    pub ISPR: [u32; 8usize],
    pub RESERVED2: [u32; 24usize],
    #[doc = "< Offset: 0x180  Interrupt Clear Pending Register"]
    pub ICPR: [u32; 8usize],
    pub RESERVED3: [u32; 24usize],
    #[doc = "< Offset: 0x200  Interrupt Active bit Register"]
    pub IABR: [u32; 8usize],
    pub RESERVED4: [u32; 56usize],
    #[doc = "< Offset: 0x300  Interrupt Priority Register (8Bit wide)"]
    pub IP: [u8; 240usize],
    pub RESERVED5: [u32; 644usize],
    #[doc = "< Offset: 0xE00  Software Trigger Interrupt Register"]
    pub STIR: u32,
}
#[test]
fn bindgen_test_layout_NVIC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<NVIC_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NVIC_Type>(),
        3588usize,
        concat!("Size of: ", stringify!(NVIC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<NVIC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NVIC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICER) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RSERVED1) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RSERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISPR) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICPR) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IABR) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IABR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IP) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STIR) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(STIR)
        )
    );
}
#[doc = " @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB\nmemory mapped structure for System Control Block (SCB)\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCB_Type {
    #[doc = "< Offset: 0x00  CPU ID Base Register"]
    pub CPUID: u32,
    #[doc = "< Offset: 0x04  Interrupt Control State Register"]
    pub ICSR: u32,
    #[doc = "< Offset: 0x08  Vector Table Offset Register"]
    pub VTOR: u32,
    #[doc = "< Offset: 0x0C  Application Interrupt / Reset Control Register"]
    pub AIRCR: u32,
    #[doc = "< Offset: 0x10  System Control Register"]
    pub SCR: u32,
    #[doc = "< Offset: 0x14  Configuration Control Register"]
    pub CCR: u32,
    #[doc = "< Offset: 0x18  System Handlers Priority Registers (4-7, 8-11, 12-15)"]
    pub SHP: [u8; 12usize],
    #[doc = "< Offset: 0x24  System Handler Control and State Register"]
    pub SHCSR: u32,
    #[doc = "< Offset: 0x28  Configurable Fault Status Register"]
    pub CFSR: u32,
    #[doc = "< Offset: 0x2C  Hard Fault Status Register"]
    pub HFSR: u32,
    #[doc = "< Offset: 0x30  Debug Fault Status Register"]
    pub DFSR: u32,
    #[doc = "< Offset: 0x34  Mem Manage Address Register"]
    pub MMFAR: u32,
    #[doc = "< Offset: 0x38  Bus Fault Address Register"]
    pub BFAR: u32,
    #[doc = "< Offset: 0x3C  Auxiliary Fault Status Register"]
    pub AFSR: u32,
    #[doc = "< Offset: 0x40  Processor Feature Register"]
    pub PFR: [u32; 2usize],
    #[doc = "< Offset: 0x48  Debug Feature Register"]
    pub DFR: u32,
    #[doc = "< Offset: 0x4C  Auxiliary Feature Register"]
    pub ADR: u32,
    #[doc = "< Offset: 0x50  Memory Model Feature Register"]
    pub MMFR: [u32; 4usize],
    #[doc = "< Offset: 0x60  ISA Feature Register"]
    pub ISAR: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_SCB_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SCB_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SCB_Type>(),
        116usize,
        concat!("Size of: ", stringify!(SCB_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCB_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPUID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPUID)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ICSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VTOR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(VTOR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AIRCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AIRCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHP) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SHCSR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHCSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFSR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HFSR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(HFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DFSR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMFAR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BFAR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(BFAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AFSR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AFSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PFR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(PFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DFR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ADR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMFR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISAR) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ISAR)
        )
    );
}
#[doc = " @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick\nmemory mapped structure for SysTick\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SysTick_Type {
    #[doc = "< Offset: 0x00  SysTick Control and Status Register"]
    pub CTRL: u32,
    #[doc = "< Offset: 0x04  SysTick Reload Value Register"]
    pub LOAD: u32,
    #[doc = "< Offset: 0x08  SysTick Current Value Register"]
    pub VAL: u32,
    #[doc = "< Offset: 0x0C  SysTick Calibration Register"]
    pub CALIB: u32,
}
#[test]
fn bindgen_test_layout_SysTick_Type() {
    const UNINIT: ::core::mem::MaybeUninit<SysTick_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SysTick_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SysTick_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<SysTick_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SysTick_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LOAD) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(LOAD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VAL) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(VAL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CALIB) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CALIB)
        )
    );
}
#[doc = " @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM\nmemory mapped structure for Instrumentation Trace Macrocell (ITM)\n@{"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ITM_Type {
    #[doc = "< Offset: 0x00  ITM Stimulus Port Registers"]
    pub PORT: [ITM_Type__bindgen_ty_1; 32usize],
    pub RESERVED0: [u32; 864usize],
    #[doc = "< Offset:       ITM Trace Enable Register"]
    pub TER: u32,
    pub RESERVED1: [u32; 15usize],
    #[doc = "< Offset:       ITM Trace Privilege Register"]
    pub TPR: u32,
    pub RESERVED2: [u32; 15usize],
    #[doc = "< Offset:       ITM Trace Control Register"]
    pub TCR: u32,
    pub RESERVED3: [u32; 29usize],
    #[doc = "< Offset:       ITM Integration Write Register"]
    pub IWR: u32,
    #[doc = "< Offset:       ITM Integration Read Register"]
    pub IRR: u32,
    #[doc = "< Offset:       ITM Integration Mode Control Register"]
    pub IMCR: u32,
    pub RESERVED4: [u32; 43usize],
    #[doc = "< Offset:       ITM Lock Access Register"]
    pub LAR: u32,
    #[doc = "< Offset:       ITM Lock Status Register"]
    pub LSR: u32,
    pub RESERVED5: [u32; 6usize],
    #[doc = "< Offset:       ITM Peripheral Identification Register #4"]
    pub PID4: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #5"]
    pub PID5: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #6"]
    pub PID6: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #7"]
    pub PID7: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #0"]
    pub PID0: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #1"]
    pub PID1: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #2"]
    pub PID2: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #3"]
    pub PID3: u32,
    #[doc = "< Offset:       ITM Component  Identification Register #0"]
    pub CID0: u32,
    #[doc = "< Offset:       ITM Component  Identification Register #1"]
    pub CID1: u32,
    #[doc = "< Offset:       ITM Component  Identification Register #2"]
    pub CID2: u32,
    #[doc = "< Offset:       ITM Component  Identification Register #3"]
    pub CID3: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ITM_Type__bindgen_ty_1 {
    #[doc = "< Offset:       ITM Stimulus Port 8-bit"]
    pub u8_: u8,
    #[doc = "< Offset:       ITM Stimulus Port 16-bit"]
    pub u16_: u16,
    #[doc = "< Offset:       ITM Stimulus Port 32-bit"]
    pub u32_: u32,
}
#[test]
fn bindgen_test_layout_ITM_Type__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<ITM_Type__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).u8_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u8_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).u16_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u16_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
#[test]
fn bindgen_test_layout_ITM_Type() {
    const UNINIT: ::core::mem::MaybeUninit<ITM_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ITM_Type>(),
        4096usize,
        concat!("Size of: ", stringify!(ITM_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<ITM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PORT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PORT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TER) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TPR) as usize - ptr as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        3652usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TCR) as usize - ptr as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        3716usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IWR) as usize - ptr as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IWR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IRR) as usize - ptr as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IRR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMCR) as usize - ptr as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IMCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LAR) as usize - ptr as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LSR) as usize - ptr as usize },
        4020usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID4) as usize - ptr as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID5) as usize - ptr as usize },
        4052usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID6) as usize - ptr as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID7) as usize - ptr as usize },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID0) as usize - ptr as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID1) as usize - ptr as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID2) as usize - ptr as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PID3) as usize - ptr as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID0) as usize - ptr as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID1) as usize - ptr as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID2) as usize - ptr as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CID3) as usize - ptr as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID3)
        )
    );
}
#[doc = " @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type\nmemory mapped structure for Interrupt Type\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InterruptType_Type {
    pub RESERVED0: u32,
    #[doc = "< Offset: 0x04  Interrupt Control Type Register"]
    pub ICTR: u32,
    pub RESERVED1: u32,
}
#[test]
fn bindgen_test_layout_InterruptType_Type() {
    const UNINIT: ::core::mem::MaybeUninit<InterruptType_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<InterruptType_Type>(),
        12usize,
        concat!("Size of: ", stringify!(InterruptType_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<InterruptType_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(InterruptType_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(InterruptType_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(InterruptType_Type),
            "::",
            stringify!(ICTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(InterruptType_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
}
#[doc = " @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug\nmemory mapped structure for Core Debug Register\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoreDebug_Type {
    #[doc = "< Offset: 0x00  Debug Halting Control and Status Register"]
    pub DHCSR: u32,
    #[doc = "< Offset: 0x04  Debug Core Register Selector Register"]
    pub DCRSR: u32,
    #[doc = "< Offset: 0x08  Debug Core Register Data Register"]
    pub DCRDR: u32,
    #[doc = "< Offset: 0x0C  Debug Exception and Monitor Control Register"]
    pub DEMCR: u32,
}
#[test]
fn bindgen_test_layout_CoreDebug_Type() {
    const UNINIT: ::core::mem::MaybeUninit<CoreDebug_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CoreDebug_Type>(),
        16usize,
        concat!("Size of: ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<CoreDebug_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHCSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DHCSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCRSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCRDR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEMCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DEMCR)
        )
    );
}
extern "C" {
    #[doc = " @brief  Return the Process Stack Pointer\n\n @return ProcessStackPointer\n\n Return the actual process stack pointer"]
    pub fn __get_PSP() -> u32;
}
extern "C" {
    #[doc = " @brief  Set the Process Stack Pointer\n\n @param  topOfProcStack  Process Stack Pointer\n\n Assign the value ProcessStackPointer to the MSP\n (process stack pointer) Cortex processor register"]
    pub fn __set_PSP(topOfProcStack: u32);
}
extern "C" {
    #[doc = " @brief  Return the Main Stack Pointer\n\n @return Main Stack Pointer\n\n Return the current value of the MSP (main stack pointer)\n Cortex processor register"]
    pub fn __get_MSP() -> u32;
}
extern "C" {
    #[doc = " @brief  Set the Main Stack Pointer\n\n @param  topOfMainStack  Main Stack Pointer\n\n Assign the value mainStackPointer to the MSP\n (main stack pointer) Cortex processor register"]
    pub fn __set_MSP(topOfMainStack: u32);
}
extern "C" {
    #[doc = " @brief  Return the Base Priority value\n\n @return BasePriority\n\n Return the content of the base priority register"]
    pub fn __get_BASEPRI() -> u32;
}
extern "C" {
    #[doc = " @brief  Set the Base Priority value\n\n @param  basePri  BasePriority\n\n Set the base priority register"]
    pub fn __set_BASEPRI(basePri: u32);
}
extern "C" {
    #[doc = " @brief  Return the Priority Mask value\n\n @return PriMask\n\n Return state of the priority mask bit from the priority mask register"]
    pub fn __get_PRIMASK() -> u32;
}
extern "C" {
    #[doc = " @brief  Set the Priority Mask value\n\n @param  priMask  PriMask\n\n Set the priority mask bit in the priority mask register"]
    pub fn __set_PRIMASK(priMask: u32);
}
extern "C" {
    #[doc = " @brief  Return the Fault Mask value\n\n @return FaultMask\n\n Return the content of the fault mask register"]
    pub fn __get_FAULTMASK() -> u32;
}
extern "C" {
    #[doc = " @brief  Set the Fault Mask value\n\n @param  faultMask  faultMask value\n\n Set the fault mask register"]
    pub fn __set_FAULTMASK(faultMask: u32);
}
extern "C" {
    #[doc = " @brief  Return the Control Register value\n\n  @return Control value\n\n Return the content of the control register"]
    pub fn __get_CONTROL() -> u32;
}
extern "C" {
    #[doc = " @brief  Set the Control Register value\n\n @param  control  Control value\n\n Set the control register"]
    pub fn __set_CONTROL(control: u32);
}
extern "C" {
    #[doc = " @brief  Reverse byte order in integer value\n\n @param  value  value to reverse\n @return        reversed value\n\n Reverse byte order in integer value"]
    pub fn __REV(value: u32) -> u32;
}
extern "C" {
    #[doc = " @brief  Reverse byte order in unsigned short value\n\n @param  value  value to reverse\n @return        reversed value\n\n Reverse byte order in unsigned short value"]
    pub fn __REV16(value: u16) -> u32;
}
extern "C" {
    #[doc = " @brief  Reverse byte order in signed short value with sign extension to integer\n\n @param  value  value to reverse\n @return        reversed value\n\n Reverse byte order in signed short value with sign extension to integer"]
    pub fn __REVSH(value: i16) -> i32;
}
extern "C" {
    #[doc = " @brief  Reverse bit order of value\n\n @param  value  value to reverse\n @return        reversed value\n\n Reverse bit order of value"]
    pub fn __RBIT(value: u32) -> u32;
}
extern "C" {
    #[doc = " @brief  LDR Exclusive (8 bit)\n\n @param  *addr  address pointer\n @return        value of (*address)\n\n Exclusive LDR command for 8 bit value"]
    pub fn __LDREXB(addr: *mut u8) -> u8;
}
extern "C" {
    #[doc = " @brief  LDR Exclusive (16 bit)\n\n @param  *addr  address pointer\n @return        value of (*address)\n\n Exclusive LDR command for 16 bit values"]
    pub fn __LDREXH(addr: *mut u16) -> u16;
}
extern "C" {
    #[doc = " @brief  LDR Exclusive (32 bit)\n\n @param  *addr  address pointer\n @return        value of (*address)\n\n Exclusive LDR command for 32 bit values"]
    pub fn __LDREXW(addr: *mut u32) -> u32;
}
extern "C" {
    #[doc = " @brief  STR Exclusive (8 bit)\n\n @param  value  value to store\n @param  *addr  address pointer\n @return        successful / failed\n\n Exclusive STR command for 8 bit values"]
    pub fn __STREXB(value: u8, addr: *mut u8) -> u32;
}
extern "C" {
    #[doc = " @brief  STR Exclusive (16 bit)\n\n @param  value  value to store\n @param  *addr  address pointer\n @return        successful / failed\n\n Exclusive STR command for 16 bit values"]
    pub fn __STREXH(value: u16, addr: *mut u16) -> u32;
}
extern "C" {
    #[doc = " @brief  STR Exclusive (32 bit)\n\n @param  value  value to store\n @param  *addr  address pointer\n @return        successful / failed\n\n Exclusive STR command for 32 bit values"]
    pub fn __STREXW(value: u32, addr: *mut u32) -> u32;
}
extern "C" {
    #[doc = "< variable to receive characters"]
    pub static mut ITM_RxBuffer: ::core::ffi::c_int;
}
extern "C" {
    #[doc = "< System Clock Frequency (Core Clock)"]
    pub static mut SystemCoreClock: u32;
}
extern "C" {
    #[doc = " @addtogroup STM32F10x_System_Exported_Functions\n @{"]
    pub fn SystemInit();
}
extern "C" {
    pub fn SystemCoreClockUpdate();
}
pub type s32 = i32;
pub type s16 = i16;
pub type s8 = i8;
pub type sc32 = i32;
pub type sc16 = i16;
pub type sc8 = i8;
pub type vs32 = i32;
pub type vs16 = i16;
pub type vs8 = i8;
pub type vsc32 = i32;
pub type vsc16 = i16;
pub type vsc8 = i8;
pub type u32_ = u32;
pub type u16_ = u16;
pub type u8_ = u8;
pub type uc32 = u32;
pub type uc16 = u16;
pub type uc8 = u8;
pub type vu32 = u32;
pub type vu16 = u16;
pub type vu8 = u8;
pub type vuc32 = u32;
pub type vuc16 = u16;
pub type vuc8 = u8;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FlagStatus {
    RESET = 0,
    SET = 1,
}
pub use self::FlagStatus as ITStatus;
impl FunctionalState {
    pub const DISABLE: FunctionalState = FunctionalState(0);
}
impl FunctionalState {
    pub const ENABLE: FunctionalState = FunctionalState(1);
}
impl ::core::ops::BitOr<FunctionalState> for FunctionalState {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        FunctionalState(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for FunctionalState {
    #[inline]
    fn bitor_assign(&mut self, rhs: FunctionalState) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<FunctionalState> for FunctionalState {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        FunctionalState(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for FunctionalState {
    #[inline]
    fn bitand_assign(&mut self, rhs: FunctionalState) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FunctionalState(pub ::core::ffi::c_uint);
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ErrorStatus {
    ERROR = 0,
    SUCCESS = 1,
}
#[doc = " @brief Analog to Digital Converter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_TypeDef {
    pub SR: u32,
    pub CR1: u32,
    pub CR2: u32,
    pub SMPR1: u32,
    pub SMPR2: u32,
    pub JOFR1: u32,
    pub JOFR2: u32,
    pub JOFR3: u32,
    pub JOFR4: u32,
    pub HTR: u32,
    pub LTR: u32,
    pub SQR1: u32,
    pub SQR2: u32,
    pub SQR3: u32,
    pub JSQR: u32,
    pub JDR1: u32,
    pub JDR2: u32,
    pub JDR3: u32,
    pub JDR4: u32,
    pub DR: u32,
}
#[test]
fn bindgen_test_layout_ADC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_TypeDef>(),
        80usize,
        concat!("Size of: ", stringify!(ADC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SMPR1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SMPR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SMPR2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SMPR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JOFR1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JOFR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JOFR2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JOFR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JOFR3) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JOFR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JOFR4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JOFR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HTR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(HTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LTR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(LTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SQR1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SQR2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SQR3) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(SQR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JSQR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JSQR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JDR1) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JDR2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JDR3) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).JDR4) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(JDR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
}
#[doc = " @brief Backup Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BKP_TypeDef {
    pub RESERVED0: u32,
    pub DR1: u16,
    pub RESERVED1: u16,
    pub DR2: u16,
    pub RESERVED2: u16,
    pub DR3: u16,
    pub RESERVED3: u16,
    pub DR4: u16,
    pub RESERVED4: u16,
    pub DR5: u16,
    pub RESERVED5: u16,
    pub DR6: u16,
    pub RESERVED6: u16,
    pub DR7: u16,
    pub RESERVED7: u16,
    pub DR8: u16,
    pub RESERVED8: u16,
    pub DR9: u16,
    pub RESERVED9: u16,
    pub DR10: u16,
    pub RESERVED10: u16,
    pub RTCCR: u16,
    pub RESERVED11: u16,
    pub CR: u16,
    pub RESERVED12: u16,
    pub CSR: u16,
    pub RESERVED13: [u16; 5usize],
    pub DR11: u16,
    pub RESERVED14: u16,
    pub DR12: u16,
    pub RESERVED15: u16,
    pub DR13: u16,
    pub RESERVED16: u16,
    pub DR14: u16,
    pub RESERVED17: u16,
    pub DR15: u16,
    pub RESERVED18: u16,
    pub DR16: u16,
    pub RESERVED19: u16,
    pub DR17: u16,
    pub RESERVED20: u16,
    pub DR18: u16,
    pub RESERVED21: u16,
    pub DR19: u16,
    pub RESERVED22: u16,
    pub DR20: u16,
    pub RESERVED23: u16,
    pub DR21: u16,
    pub RESERVED24: u16,
    pub DR22: u16,
    pub RESERVED25: u16,
    pub DR23: u16,
    pub RESERVED26: u16,
    pub DR24: u16,
    pub RESERVED27: u16,
    pub DR25: u16,
    pub RESERVED28: u16,
    pub DR26: u16,
    pub RESERVED29: u16,
    pub DR27: u16,
    pub RESERVED30: u16,
    pub DR28: u16,
    pub RESERVED31: u16,
    pub DR29: u16,
    pub RESERVED32: u16,
    pub DR30: u16,
    pub RESERVED33: u16,
    pub DR31: u16,
    pub RESERVED34: u16,
    pub DR32: u16,
    pub RESERVED35: u16,
    pub DR33: u16,
    pub RESERVED36: u16,
    pub DR34: u16,
    pub RESERVED37: u16,
    pub DR35: u16,
    pub RESERVED38: u16,
    pub DR36: u16,
    pub RESERVED39: u16,
    pub DR37: u16,
    pub RESERVED40: u16,
    pub DR38: u16,
    pub RESERVED41: u16,
    pub DR39: u16,
    pub RESERVED42: u16,
    pub DR40: u16,
    pub RESERVED43: u16,
    pub DR41: u16,
    pub RESERVED44: u16,
    pub DR42: u16,
    pub RESERVED45: u16,
}
#[test]
fn bindgen_test_layout_BKP_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<BKP_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<BKP_TypeDef>(),
        192usize,
        concat!("Size of: ", stringify!(BKP_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<BKP_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(BKP_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR9) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR10) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTCCR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RTCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR11) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR12) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR13) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED16) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR14) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED17) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED17)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR15) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED18) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED18)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR16) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED19) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED19)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR17) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR17)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED20) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED20)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR18) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR18)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED21) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED21)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR19) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR19)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED22) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED22)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR20) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR20)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED23) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED23)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR21) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR21)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED24) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED24)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR22) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR22)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED25) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED25)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR23) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR23)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED26) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED26)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR24) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR24)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED27) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED27)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR25) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR25)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED28) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED28)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR26) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR26)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED29) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED29)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR27) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR27)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED30) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED30)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR28) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR28)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED31) as usize - ptr as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED31)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR29) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR29)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED32) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED32)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR30) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR30)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED33) as usize - ptr as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED33)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR31) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR31)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED34) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED34)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR32) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR32)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED35) as usize - ptr as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED35)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR33) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR33)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED36) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED36)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR34) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR34)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED37) as usize - ptr as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED37)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR35) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR35)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED38) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED38)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR36) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR36)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED39) as usize - ptr as usize },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED39)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR37) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR37)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED40) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED40)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR38) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR38)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED41) as usize - ptr as usize },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED41)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR39) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR39)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED42) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED42)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR40) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR40)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED43) as usize - ptr as usize },
        182usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED43)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR41) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR41)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED44) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED44)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR42) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(DR42)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED45) as usize - ptr as usize },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(BKP_TypeDef),
            "::",
            stringify!(RESERVED45)
        )
    );
}
#[doc = " @brief Controller Area Network TxMailBox"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_TxMailBox_TypeDef {
    pub TIR: u32,
    pub TDTR: u32,
    pub TDLR: u32,
    pub TDHR: u32,
}
#[test]
fn bindgen_test_layout_CAN_TxMailBox_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CAN_TxMailBox_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CAN_TxMailBox_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(CAN_TxMailBox_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_TxMailBox_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_TxMailBox_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TDLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TDHR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDHR)
        )
    );
}
#[doc = " @brief Controller Area Network FIFOMailBox"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_FIFOMailBox_TypeDef {
    pub RIR: u32,
    pub RDTR: u32,
    pub RDLR: u32,
    pub RDHR: u32,
}
#[test]
fn bindgen_test_layout_CAN_FIFOMailBox_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CAN_FIFOMailBox_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CAN_FIFOMailBox_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(CAN_FIFOMailBox_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_FIFOMailBox_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_FIFOMailBox_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RIR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RDLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RDHR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDHR)
        )
    );
}
#[doc = " @brief Controller Area Network FilterRegister"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_FilterRegister_TypeDef {
    pub FR1: u32,
    pub FR2: u32,
}
#[test]
fn bindgen_test_layout_CAN_FilterRegister_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CAN_FilterRegister_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CAN_FilterRegister_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(CAN_FilterRegister_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_FilterRegister_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_FilterRegister_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterRegister_TypeDef),
            "::",
            stringify!(FR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterRegister_TypeDef),
            "::",
            stringify!(FR2)
        )
    );
}
#[doc = " @brief Controller Area Network"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_TypeDef {
    pub MCR: u32,
    pub MSR: u32,
    pub TSR: u32,
    pub RF0R: u32,
    pub RF1R: u32,
    pub IER: u32,
    pub ESR: u32,
    pub BTR: u32,
    pub RESERVED0: [u32; 88usize],
    pub sTxMailBox: [CAN_TxMailBox_TypeDef; 3usize],
    pub sFIFOMailBox: [CAN_FIFOMailBox_TypeDef; 2usize],
    pub RESERVED1: [u32; 12usize],
    pub FMR: u32,
    pub FM1R: u32,
    pub RESERVED2: u32,
    pub FS1R: u32,
    pub RESERVED3: u32,
    pub FFA1R: u32,
    pub RESERVED4: u32,
    pub FA1R: u32,
    pub RESERVED5: [u32; 8usize],
    pub sFilterRegister: [CAN_FilterRegister_TypeDef; 14usize],
}
#[test]
fn bindgen_test_layout_CAN_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CAN_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CAN_TypeDef>(),
        688usize,
        concat!("Size of: ", stringify!(CAN_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(MSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TSR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(TSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RF0R) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RF0R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RF1R) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RF1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ESR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(ESR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BTR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(BTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sTxMailBox) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(sTxMailBox)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sFIFOMailBox) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(sFIFOMailBox)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FMR) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FM1R) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FM1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FS1R) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FS1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FFA1R) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FFA1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FA1R) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(FA1R)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sFilterRegister) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_TypeDef),
            "::",
            stringify!(sFilterRegister)
        )
    );
}
#[doc = " @brief Consumer Electronics Control (CEC)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CEC_TypeDef {
    pub CFGR: u32,
    pub OAR: u32,
    pub PRES: u32,
    pub ESR: u32,
    pub CSR: u32,
    pub TXD: u32,
    pub RXD: u32,
}
#[test]
fn bindgen_test_layout_CEC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CEC_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CEC_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(CEC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CEC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CEC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OAR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(OAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRES) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(PRES)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ESR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(ESR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_TypeDef),
            "::",
            stringify!(RXD)
        )
    );
}
#[doc = " @brief CRC calculation unit"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_TypeDef {
    pub DR: u32,
    pub IDR: u8,
    pub RESERVED0: u8,
    pub RESERVED1: u16,
    pub CR: u32,
}
#[test]
fn bindgen_test_layout_CRC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CRC_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CRC_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(CRC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CRC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IDR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
}
#[doc = " @brief Digital to Analog Converter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_TypeDef {
    pub CR: u32,
    pub SWTRIGR: u32,
    pub DHR12R1: u32,
    pub DHR12L1: u32,
    pub DHR8R1: u32,
    pub DHR12R2: u32,
    pub DHR12L2: u32,
    pub DHR8R2: u32,
    pub DHR12RD: u32,
    pub DHR12LD: u32,
    pub DHR8RD: u32,
    pub DOR1: u32,
    pub DOR2: u32,
}
#[test]
fn bindgen_test_layout_DAC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DAC_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DAC_TypeDef>(),
        52usize,
        concat!("Size of: ", stringify!(DAC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DAC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DAC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SWTRIGR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(SWTRIGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR12R1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12R1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR12L1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12L1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR8R1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8R1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR12R2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12R2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR12L2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12L2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR8R2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8R2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR12RD) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12RD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR12LD) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR12LD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DHR8RD) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DHR8RD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOR1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DOR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DOR2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_TypeDef),
            "::",
            stringify!(DOR2)
        )
    );
}
#[doc = " @brief Debug MCU"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DBGMCU_TypeDef {
    pub IDCODE: u32,
    pub CR: u32,
}
#[test]
fn bindgen_test_layout_DBGMCU_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DBGMCU_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DBGMCU_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(DBGMCU_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DBGMCU_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DBGMCU_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IDCODE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(IDCODE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DBGMCU_TypeDef),
            "::",
            stringify!(CR)
        )
    );
}
#[doc = " @brief DMA Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_Channel_TypeDef {
    pub CCR: u32,
    pub CNDTR: u32,
    pub CPAR: u32,
    pub CMAR: u32,
}
#[test]
fn bindgen_test_layout_DMA_Channel_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMA_Channel_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMA_Channel_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(DMA_Channel_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_Channel_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_Channel_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Channel_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Channel_TypeDef),
            "::",
            stringify!(CNDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CPAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Channel_TypeDef),
            "::",
            stringify!(CPAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMAR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Channel_TypeDef),
            "::",
            stringify!(CMAR)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_TypeDef {
    pub ISR: u32,
    pub IFCR: u32,
}
#[test]
fn bindgen_test_layout_DMA_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMA_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMA_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(DMA_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IFCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_TypeDef),
            "::",
            stringify!(IFCR)
        )
    );
}
#[doc = " @brief Ethernet MAC"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ETH_TypeDef {
    pub MACCR: u32,
    pub MACFFR: u32,
    pub MACHTHR: u32,
    pub MACHTLR: u32,
    pub MACMIIAR: u32,
    pub MACMIIDR: u32,
    pub MACFCR: u32,
    pub MACVLANTR: u32,
    pub RESERVED0: [u32; 2usize],
    pub MACRWUFFR: u32,
    pub MACPMTCSR: u32,
    pub RESERVED1: [u32; 2usize],
    pub MACSR: u32,
    pub MACIMR: u32,
    pub MACA0HR: u32,
    pub MACA0LR: u32,
    pub MACA1HR: u32,
    pub MACA1LR: u32,
    pub MACA2HR: u32,
    pub MACA2LR: u32,
    pub MACA3HR: u32,
    pub MACA3LR: u32,
    pub RESERVED2: [u32; 40usize],
    pub MMCCR: u32,
    pub MMCRIR: u32,
    pub MMCTIR: u32,
    pub MMCRIMR: u32,
    pub MMCTIMR: u32,
    pub RESERVED3: [u32; 14usize],
    pub MMCTGFSCCR: u32,
    pub MMCTGFMSCCR: u32,
    pub RESERVED4: [u32; 5usize],
    pub MMCTGFCR: u32,
    pub RESERVED5: [u32; 10usize],
    pub MMCRFCECR: u32,
    pub MMCRFAECR: u32,
    pub RESERVED6: [u32; 10usize],
    pub MMCRGUFCR: u32,
    pub RESERVED7: [u32; 334usize],
    pub PTPTSCR: u32,
    pub PTPSSIR: u32,
    pub PTPTSHR: u32,
    pub PTPTSLR: u32,
    pub PTPTSHUR: u32,
    pub PTPTSLUR: u32,
    pub PTPTSAR: u32,
    pub PTPTTHR: u32,
    pub PTPTTLR: u32,
    pub RESERVED8: [u32; 567usize],
    pub DMABMR: u32,
    pub DMATPDR: u32,
    pub DMARPDR: u32,
    pub DMARDLAR: u32,
    pub DMATDLAR: u32,
    pub DMASR: u32,
    pub DMAOMR: u32,
    pub DMAIER: u32,
    pub DMAMFBOCR: u32,
    pub RESERVED9: [u32; 9usize],
    pub DMACHTDR: u32,
    pub DMACHRDR: u32,
    pub DMACHTBAR: u32,
    pub DMACHRBAR: u32,
}
#[test]
fn bindgen_test_layout_ETH_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ETH_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ETH_TypeDef>(),
        4184usize,
        concat!("Size of: ", stringify!(ETH_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ETH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ETH_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACFFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACFFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACHTHR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACHTHR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACHTLR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACHTLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACMIIAR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACMIIAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACMIIDR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACMIIDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACFCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACVLANTR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACVLANTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACRWUFFR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACRWUFFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACPMTCSR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACPMTCSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACSR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACIMR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACIMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACA0HR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA0HR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACA0LR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA0LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACA1HR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA1HR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACA1LR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA1LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACA2HR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA2HR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACA2LR) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA2LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACA3HR) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA3HR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MACA3LR) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MACA3LR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCCR) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCRIR) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCTIR) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCRIMR) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRIMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCTIMR) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTIMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCTGFSCCR) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTGFSCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCTGFMSCCR) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTGFMSCCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCTGFCR) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCTGFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCRFCECR) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRFCECR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCRFAECR) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRFAECR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MMCRGUFCR) as usize - ptr as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(MMCRGUFCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPTSCR) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPTSCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPSSIR) as usize - ptr as usize },
        1796usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPSSIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPTSHR) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPTSHR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPTSLR) as usize - ptr as usize },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPTSLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPTSHUR) as usize - ptr as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPTSHUR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPTSLUR) as usize - ptr as usize },
        1812usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPTSLUR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPTSAR) as usize - ptr as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPTSAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPTTHR) as usize - ptr as usize },
        1820usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPTTHR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PTPTTLR) as usize - ptr as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(PTPTTLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        1828usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMABMR) as usize - ptr as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMABMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMATPDR) as usize - ptr as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMATPDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMARPDR) as usize - ptr as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMARPDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMARDLAR) as usize - ptr as usize },
        4108usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMARDLAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMATDLAR) as usize - ptr as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMATDLAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMASR) as usize - ptr as usize },
        4116usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMASR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMAOMR) as usize - ptr as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMAOMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMAIER) as usize - ptr as usize },
        4124usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMAIER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMAMFBOCR) as usize - ptr as usize },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMAMFBOCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        4132usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMACHTDR) as usize - ptr as usize },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACHTDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMACHRDR) as usize - ptr as usize },
        4172usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACHRDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMACHTBAR) as usize - ptr as usize },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACHTBAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMACHRBAR) as usize - ptr as usize },
        4180usize,
        concat!(
            "Offset of field: ",
            stringify!(ETH_TypeDef),
            "::",
            stringify!(DMACHRBAR)
        )
    );
}
#[doc = " @brief External Interrupt/Event Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXTI_TypeDef {
    pub IMR: u32,
    pub EMR: u32,
    pub RTSR: u32,
    pub FTSR: u32,
    pub SWIER: u32,
    pub PR: u32,
}
#[test]
fn bindgen_test_layout_EXTI_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<EXTI_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<EXTI_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(EXTI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<EXTI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(EXTI_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IMR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(IMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EMR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(EMR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTSR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(RTSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FTSR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(FTSR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SWIER) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(SWIER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_TypeDef),
            "::",
            stringify!(PR)
        )
    );
}
#[doc = " @brief FLASH Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASH_TypeDef {
    pub ACR: u32,
    pub KEYR: u32,
    pub OPTKEYR: u32,
    pub SR: u32,
    pub CR: u32,
    pub AR: u32,
    pub RESERVED: u32,
    pub OBR: u32,
    pub WRPR: u32,
}
#[test]
fn bindgen_test_layout_FLASH_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FLASH_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FLASH_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(FLASH_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FLASH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FLASH_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ACR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(ACR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).KEYR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(KEYR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OPTKEYR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OPTKEYR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(AR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OBR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(OBR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WRPR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FLASH_TypeDef),
            "::",
            stringify!(WRPR)
        )
    );
}
#[doc = " @brief Option Bytes Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OB_TypeDef {
    pub RDP: u16,
    pub USER: u16,
    pub Data0: u16,
    pub Data1: u16,
    pub WRP0: u16,
    pub WRP1: u16,
    pub WRP2: u16,
    pub WRP3: u16,
}
#[test]
fn bindgen_test_layout_OB_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<OB_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<OB_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(OB_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<OB_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(OB_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RDP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(RDP)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USER) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(USER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Data0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(Data0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Data1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WRP0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(WRP0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WRP1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(WRP1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WRP2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(WRP2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).WRP3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(OB_TypeDef),
            "::",
            stringify!(WRP3)
        )
    );
}
#[doc = " @brief Flexible Static Memory Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_Bank1_TypeDef {
    pub BTCR: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_FSMC_Bank1_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_Bank1_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_Bank1_TypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(FSMC_Bank1_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_Bank1_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_Bank1_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BTCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank1_TypeDef),
            "::",
            stringify!(BTCR)
        )
    );
}
#[doc = " @brief Flexible Static Memory Controller Bank1E"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_Bank1E_TypeDef {
    pub BWTR: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_FSMC_Bank1E_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_Bank1E_TypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_Bank1E_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(FSMC_Bank1E_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_Bank1E_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_Bank1E_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BWTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank1E_TypeDef),
            "::",
            stringify!(BWTR)
        )
    );
}
#[doc = " @brief Flexible Static Memory Controller Bank2"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_Bank2_TypeDef {
    pub PCR2: u32,
    pub SR2: u32,
    pub PMEM2: u32,
    pub PATT2: u32,
    pub RESERVED0: u32,
    pub ECCR2: u32,
}
#[test]
fn bindgen_test_layout_FSMC_Bank2_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_Bank2_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_Bank2_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(FSMC_Bank2_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_Bank2_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_Bank2_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCR2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank2_TypeDef),
            "::",
            stringify!(PCR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank2_TypeDef),
            "::",
            stringify!(SR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PMEM2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank2_TypeDef),
            "::",
            stringify!(PMEM2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PATT2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank2_TypeDef),
            "::",
            stringify!(PATT2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank2_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECCR2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank2_TypeDef),
            "::",
            stringify!(ECCR2)
        )
    );
}
#[doc = " @brief Flexible Static Memory Controller Bank3"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_Bank3_TypeDef {
    pub PCR3: u32,
    pub SR3: u32,
    pub PMEM3: u32,
    pub PATT3: u32,
    pub RESERVED0: u32,
    pub ECCR3: u32,
}
#[test]
fn bindgen_test_layout_FSMC_Bank3_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_Bank3_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_Bank3_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(FSMC_Bank3_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_Bank3_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_Bank3_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCR3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank3_TypeDef),
            "::",
            stringify!(PCR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR3) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank3_TypeDef),
            "::",
            stringify!(SR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PMEM3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank3_TypeDef),
            "::",
            stringify!(PMEM3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PATT3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank3_TypeDef),
            "::",
            stringify!(PATT3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank3_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECCR3) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank3_TypeDef),
            "::",
            stringify!(ECCR3)
        )
    );
}
#[doc = " @brief Flexible Static Memory Controller Bank4"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_Bank4_TypeDef {
    pub PCR4: u32,
    pub SR4: u32,
    pub PMEM4: u32,
    pub PATT4: u32,
    pub PIO4: u32,
}
#[test]
fn bindgen_test_layout_FSMC_Bank4_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_Bank4_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_Bank4_TypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(FSMC_Bank4_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_Bank4_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_Bank4_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCR4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank4_TypeDef),
            "::",
            stringify!(PCR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank4_TypeDef),
            "::",
            stringify!(SR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PMEM4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank4_TypeDef),
            "::",
            stringify!(PMEM4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PATT4) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank4_TypeDef),
            "::",
            stringify!(PATT4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PIO4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_Bank4_TypeDef),
            "::",
            stringify!(PIO4)
        )
    );
}
#[doc = " @brief General Purpose I/O"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_TypeDef {
    pub CRL: u32,
    pub CRH: u32,
    pub IDR: u32,
    pub ODR: u32,
    pub BSRR: u32,
    pub BRR: u32,
    pub LCKR: u32,
}
#[test]
fn bindgen_test_layout_GPIO_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<GPIO_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<GPIO_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(GPIO_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<GPIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(GPIO_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(CRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRH) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(CRH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IDR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ODR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(ODR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BSRR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(BSRR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BRR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LCKR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_TypeDef),
            "::",
            stringify!(LCKR)
        )
    );
}
#[doc = " @brief Alternate Function I/O"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AFIO_TypeDef {
    pub EVCR: u32,
    pub MAPR: u32,
    pub EXTICR: [u32; 4usize],
    pub RESERVED0: u32,
    pub MAPR2: u32,
}
#[test]
fn bindgen_test_layout_AFIO_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<AFIO_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<AFIO_TypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(AFIO_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<AFIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(AFIO_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EVCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AFIO_TypeDef),
            "::",
            stringify!(EVCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAPR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AFIO_TypeDef),
            "::",
            stringify!(MAPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXTICR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AFIO_TypeDef),
            "::",
            stringify!(EXTICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AFIO_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MAPR2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AFIO_TypeDef),
            "::",
            stringify!(MAPR2)
        )
    );
}
#[doc = " @brief Inter Integrated Circuit Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2C_TypeDef {
    pub CR1: u16,
    pub RESERVED0: u16,
    pub CR2: u16,
    pub RESERVED1: u16,
    pub OAR1: u16,
    pub RESERVED2: u16,
    pub OAR2: u16,
    pub RESERVED3: u16,
    pub DR: u16,
    pub RESERVED4: u16,
    pub SR1: u16,
    pub RESERVED5: u16,
    pub SR2: u16,
    pub RESERVED6: u16,
    pub CCR: u16,
    pub RESERVED7: u16,
    pub TRISE: u16,
    pub RESERVED8: u16,
}
#[test]
fn bindgen_test_layout_I2C_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<I2C_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2C_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(I2C_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<I2C_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(I2C_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OAR1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(OAR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).OAR2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(OAR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(SR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(SR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TRISE) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(TRISE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
}
#[doc = " @brief Independent WATCHDOG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWDG_TypeDef {
    pub KR: u32,
    pub PR: u32,
    pub RLR: u32,
    pub SR: u32,
}
#[test]
fn bindgen_test_layout_IWDG_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<IWDG_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<IWDG_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(IWDG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<IWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(IWDG_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).KR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(KR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(PR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(RLR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
#[doc = " @brief Power Control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWR_TypeDef {
    pub CR: u32,
    pub CSR: u32,
}
#[test]
fn bindgen_test_layout_PWR_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<PWR_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<PWR_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(PWR_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<PWR_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(PWR_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PWR_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[doc = " @brief Reset and Clock Control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_TypeDef {
    pub CR: u32,
    pub CFGR: u32,
    pub CIR: u32,
    pub APB2RSTR: u32,
    pub APB1RSTR: u32,
    pub AHBENR: u32,
    pub APB2ENR: u32,
    pub APB1ENR: u32,
    pub BDCR: u32,
    pub CSR: u32,
}
#[test]
fn bindgen_test_layout_RCC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(RCC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CIR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).APB2RSTR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2RSTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).APB1RSTR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1RSTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AHBENR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(AHBENR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).APB2ENR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB2ENR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).APB1ENR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(APB1ENR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BDCR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(BDCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[doc = " @brief Real-Time Clock"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_TypeDef {
    pub CRH: u16,
    pub RESERVED0: u16,
    pub CRL: u16,
    pub RESERVED1: u16,
    pub PRLH: u16,
    pub RESERVED2: u16,
    pub PRLL: u16,
    pub RESERVED3: u16,
    pub DIVH: u16,
    pub RESERVED4: u16,
    pub DIVL: u16,
    pub RESERVED5: u16,
    pub CNTH: u16,
    pub RESERVED6: u16,
    pub CNTL: u16,
    pub RESERVED7: u16,
    pub ALRH: u16,
    pub RESERVED8: u16,
    pub ALRL: u16,
    pub RESERVED9: u16,
}
#[test]
fn bindgen_test_layout_RTC_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RTC_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RTC_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(RTC_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RTC_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(RTC_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CRH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRL) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRLH) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(PRLH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PRLL) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(PRLL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIVH) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(DIVH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIVL) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(DIVL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNTH) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CNTH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNTL) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(CNTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ALRH) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRH)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ALRL) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(ALRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
}
#[doc = " @brief SD host Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDIO_TypeDef {
    pub POWER: u32,
    pub CLKCR: u32,
    pub ARG: u32,
    pub CMD: u32,
    pub RESPCMD: u32,
    pub RESP1: u32,
    pub RESP2: u32,
    pub RESP3: u32,
    pub RESP4: u32,
    pub DTIMER: u32,
    pub DLEN: u32,
    pub DCTRL: u32,
    pub DCOUNT: u32,
    pub STA: u32,
    pub ICR: u32,
    pub MASK: u32,
    pub RESERVED0: [u32; 2usize],
    pub FIFOCNT: u32,
    pub RESERVED1: [u32; 13usize],
    pub FIFO: u32,
}
#[test]
fn bindgen_test_layout_SDIO_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDIO_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDIO_TypeDef>(),
        132usize,
        concat!("Size of: ", stringify!(SDIO_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDIO_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).POWER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(POWER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CLKCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(CLKCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ARG) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(ARG)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CMD) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(CMD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESPCMD) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESPCMD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESP1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESP1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESP2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESP2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESP3) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESP3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESP4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESP4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DTIMER) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(DTIMER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DLEN) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(DLEN)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCTRL) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(DCTRL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCOUNT) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(DCOUNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STA) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(STA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MASK) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(MASK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FIFOCNT) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(FIFOCNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FIFO) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_TypeDef),
            "::",
            stringify!(FIFO)
        )
    );
}
#[doc = " @brief Serial Peripheral Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPI_TypeDef {
    pub CR1: u16,
    pub RESERVED0: u16,
    pub CR2: u16,
    pub RESERVED1: u16,
    pub SR: u16,
    pub RESERVED2: u16,
    pub DR: u16,
    pub RESERVED3: u16,
    pub CRCPR: u16,
    pub RESERVED4: u16,
    pub RXCRCR: u16,
    pub RESERVED5: u16,
    pub TXCRCR: u16,
    pub RESERVED6: u16,
    pub I2SCFGR: u16,
    pub RESERVED7: u16,
    pub I2SPR: u16,
    pub RESERVED8: u16,
}
#[test]
fn bindgen_test_layout_SPI_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SPI_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPI_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(SPI_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SPI_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(SPI_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRCPR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(CRCPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RXCRCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RXCRCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TXCRCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(TXCRCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2SCFGR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(I2SCFGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2SPR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(I2SPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
}
#[doc = " @brief TIM"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_TypeDef {
    pub CR1: u16,
    pub RESERVED0: u16,
    pub CR2: u16,
    pub RESERVED1: u16,
    pub SMCR: u16,
    pub RESERVED2: u16,
    pub DIER: u16,
    pub RESERVED3: u16,
    pub SR: u16,
    pub RESERVED4: u16,
    pub EGR: u16,
    pub RESERVED5: u16,
    pub CCMR1: u16,
    pub RESERVED6: u16,
    pub CCMR2: u16,
    pub RESERVED7: u16,
    pub CCER: u16,
    pub RESERVED8: u16,
    pub CNT: u16,
    pub RESERVED9: u16,
    pub PSC: u16,
    pub RESERVED10: u16,
    pub ARR: u16,
    pub RESERVED11: u16,
    pub RCR: u16,
    pub RESERVED12: u16,
    pub CCR1: u16,
    pub RESERVED13: u16,
    pub CCR2: u16,
    pub RESERVED14: u16,
    pub CCR3: u16,
    pub RESERVED15: u16,
    pub CCR4: u16,
    pub RESERVED16: u16,
    pub BDTR: u16,
    pub RESERVED17: u16,
    pub DCR: u16,
    pub RESERVED18: u16,
    pub DMAR: u16,
    pub RESERVED19: u16,
}
#[test]
fn bindgen_test_layout_TIM_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_TypeDef>(),
        80usize,
        concat!("Size of: ", stringify!(TIM_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(TIM_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SMCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(SMCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DIER) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DIER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EGR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(EGR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCMR1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCMR2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCMR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCER) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCER)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PSC) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(PSC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ARR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(ARR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RCR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR1) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR3) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CCR4) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(CCR4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED16) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BDTR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(BDTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED17) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED17)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DCR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DCR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED18) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED18)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMAR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(DMAR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED19) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TypeDef),
            "::",
            stringify!(RESERVED19)
        )
    );
}
#[doc = " @brief Universal Synchronous Asynchronous Receiver Transmitter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USART_TypeDef {
    pub SR: u16,
    pub RESERVED0: u16,
    pub DR: u16,
    pub RESERVED1: u16,
    pub BRR: u16,
    pub RESERVED2: u16,
    pub CR1: u16,
    pub RESERVED3: u16,
    pub CR2: u16,
    pub RESERVED4: u16,
    pub CR3: u16,
    pub RESERVED5: u16,
    pub GTPR: u16,
    pub RESERVED6: u16,
}
#[test]
fn bindgen_test_layout_USART_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USART_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USART_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(USART_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USART_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(USART_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).BRR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR3) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(CR3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GTPR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(GTPR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
}
#[doc = " @brief Window WATCHDOG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WWDG_TypeDef {
    pub CR: u32,
    pub CFR: u32,
    pub SR: u32,
}
#[test]
fn bindgen_test_layout_WWDG_TypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<WWDG_TypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<WWDG_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(WWDG_TypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<WWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(WWDG_TypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(CFR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
#[doc = " @brief  ADC Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_InitTypeDef {
    #[doc = "< Configures the ADC to operate in independent or\ndual mode.\nThis parameter can be a value of @ref ADC_mode"]
    pub ADC_Mode: u32,
    #[doc = "< Specifies whether the conversion is performed in\nScan (multichannels) or Single (one channel) mode.\nThis parameter can be set to ENABLE or DISABLE"]
    pub ADC_ScanConvMode: FunctionalState,
    #[doc = "< Specifies whether the conversion is performed in\nContinuous or Single mode.\nThis parameter can be set to ENABLE or DISABLE."]
    pub ADC_ContinuousConvMode: FunctionalState,
    #[doc = "< Defines the external trigger used to start the analog\nto digital conversion of regular channels. This parameter\ncan be a value of @ref ADC_external_trigger_sources_for_regular_channels_conversion"]
    pub ADC_ExternalTrigConv: u32,
    #[doc = "< Specifies whether the ADC data alignment is left or right.\nThis parameter can be a value of @ref ADC_data_align"]
    pub ADC_DataAlign: u32,
    #[doc = "< Specifies the number of ADC channels that will be converted\nusing the sequencer for regular channel group.\nThis parameter must range from 1 to 16."]
    pub ADC_NbrOfChannel: u8,
}
#[test]
fn bindgen_test_layout_ADC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<ADC_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<ADC_InitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(ADC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<ADC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC_Mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ADC_Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC_ScanConvMode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ADC_ScanConvMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC_ContinuousConvMode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ADC_ContinuousConvMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC_ExternalTrigConv) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ADC_ExternalTrigConv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC_DataAlign) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ADC_DataAlign)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADC_NbrOfChannel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_InitTypeDef),
            "::",
            stringify!(ADC_NbrOfChannel)
        )
    );
}
extern "C" {
    #[doc = " @defgroup ADC_Exported_Functions\n @{"]
    pub fn ADC_DeInit(ADCx: *mut ADC_TypeDef);
}
extern "C" {
    pub fn ADC_Init(ADCx: *mut ADC_TypeDef, ADC_InitStruct: *mut ADC_InitTypeDef);
}
extern "C" {
    pub fn ADC_StructInit(ADC_InitStruct: *mut ADC_InitTypeDef);
}
extern "C" {
    pub fn ADC_Cmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_DMACmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_ITConfig(ADCx: *mut ADC_TypeDef, ADC_IT: u16, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_ResetCalibration(ADCx: *mut ADC_TypeDef);
}
extern "C" {
    pub fn ADC_GetResetCalibrationStatus(ADCx: *mut ADC_TypeDef) -> FlagStatus;
}
extern "C" {
    pub fn ADC_StartCalibration(ADCx: *mut ADC_TypeDef);
}
extern "C" {
    pub fn ADC_GetCalibrationStatus(ADCx: *mut ADC_TypeDef) -> FlagStatus;
}
extern "C" {
    pub fn ADC_SoftwareStartConvCmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_GetSoftwareStartConvStatus(ADCx: *mut ADC_TypeDef) -> FlagStatus;
}
extern "C" {
    pub fn ADC_DiscModeChannelCountConfig(ADCx: *mut ADC_TypeDef, Number: u8);
}
extern "C" {
    pub fn ADC_DiscModeCmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_RegularChannelConfig(
        ADCx: *mut ADC_TypeDef,
        ADC_Channel: u8,
        Rank: u8,
        ADC_SampleTime: u8,
    );
}
extern "C" {
    pub fn ADC_ExternalTrigConvCmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_GetConversionValue(ADCx: *mut ADC_TypeDef) -> u16;
}
extern "C" {
    pub fn ADC_GetDualModeConversionValue() -> u32;
}
extern "C" {
    pub fn ADC_AutoInjectedConvCmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_InjectedDiscModeCmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_ExternalTrigInjectedConvConfig(
        ADCx: *mut ADC_TypeDef,
        ADC_ExternalTrigInjecConv: u32,
    );
}
extern "C" {
    pub fn ADC_ExternalTrigInjectedConvCmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_SoftwareStartInjectedConvCmd(ADCx: *mut ADC_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_GetSoftwareStartInjectedConvCmdStatus(ADCx: *mut ADC_TypeDef) -> FlagStatus;
}
extern "C" {
    pub fn ADC_InjectedChannelConfig(
        ADCx: *mut ADC_TypeDef,
        ADC_Channel: u8,
        Rank: u8,
        ADC_SampleTime: u8,
    );
}
extern "C" {
    pub fn ADC_InjectedSequencerLengthConfig(ADCx: *mut ADC_TypeDef, Length: u8);
}
extern "C" {
    pub fn ADC_SetInjectedOffset(ADCx: *mut ADC_TypeDef, ADC_InjectedChannel: u8, Offset: u16);
}
extern "C" {
    pub fn ADC_GetInjectedConversionValue(ADCx: *mut ADC_TypeDef, ADC_InjectedChannel: u8) -> u16;
}
extern "C" {
    pub fn ADC_AnalogWatchdogCmd(ADCx: *mut ADC_TypeDef, ADC_AnalogWatchdog: u32);
}
extern "C" {
    pub fn ADC_AnalogWatchdogThresholdsConfig(
        ADCx: *mut ADC_TypeDef,
        HighThreshold: u16,
        LowThreshold: u16,
    );
}
extern "C" {
    pub fn ADC_AnalogWatchdogSingleChannelConfig(ADCx: *mut ADC_TypeDef, ADC_Channel: u8);
}
extern "C" {
    pub fn ADC_TempSensorVrefintCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn ADC_GetFlagStatus(ADCx: *mut ADC_TypeDef, ADC_FLAG: u8) -> FlagStatus;
}
extern "C" {
    pub fn ADC_ClearFlag(ADCx: *mut ADC_TypeDef, ADC_FLAG: u8);
}
extern "C" {
    pub fn ADC_GetITStatus(ADCx: *mut ADC_TypeDef, ADC_IT: u16) -> ITStatus;
}
extern "C" {
    pub fn ADC_ClearITPendingBit(ADCx: *mut ADC_TypeDef, ADC_IT: u16);
}
extern "C" {
    #[doc = " @defgroup BKP_Exported_Functions\n @{"]
    pub fn BKP_DeInit();
}
extern "C" {
    pub fn BKP_TamperPinLevelConfig(BKP_TamperPinLevel: u16);
}
extern "C" {
    pub fn BKP_TamperPinCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn BKP_ITConfig(NewState: FunctionalState);
}
extern "C" {
    pub fn BKP_RTCOutputConfig(BKP_RTCOutputSource: u16);
}
extern "C" {
    pub fn BKP_SetRTCCalibrationValue(CalibrationValue: u8);
}
extern "C" {
    pub fn BKP_WriteBackupRegister(BKP_DR: u16, Data: u16);
}
extern "C" {
    pub fn BKP_ReadBackupRegister(BKP_DR: u16) -> u16;
}
extern "C" {
    pub fn BKP_GetFlagStatus() -> FlagStatus;
}
extern "C" {
    pub fn BKP_ClearFlag();
}
extern "C" {
    pub fn BKP_GetITStatus() -> ITStatus;
}
extern "C" {
    pub fn BKP_ClearITPendingBit();
}
#[doc = " @brief  CAN init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_InitTypeDef {
    #[doc = "< Specifies the length of a time quantum.\nIt ranges from 1 to 1024."]
    pub CAN_Prescaler: u16,
    #[doc = "< Specifies the CAN operating mode.\nThis parameter can be a value of\n@ref CAN_operating_mode"]
    pub CAN_Mode: u8,
    #[doc = "< Specifies the maximum number of time quanta\nthe CAN hardware is allowed to lengthen or\nshorten a bit to perform resynchronization.\nThis parameter can be a value of\n@ref CAN_synchronisation_jump_width"]
    pub CAN_SJW: u8,
    #[doc = "< Specifies the number of time quanta in Bit\nSegment 1. This parameter can be a value of\n@ref CAN_time_quantum_in_bit_segment_1"]
    pub CAN_BS1: u8,
    #[doc = "< Specifies the number of time quanta in Bit\nSegment 2.\nThis parameter can be a value of\n@ref CAN_time_quantum_in_bit_segment_2"]
    pub CAN_BS2: u8,
    #[doc = "< Enable or disable the time triggered\ncommunication mode. This parameter can be set\neither to ENABLE or DISABLE."]
    pub CAN_TTCM: FunctionalState,
    #[doc = "< Enable or disable the automatic bus-off\nmanagement. This parameter can be set either\nto ENABLE or DISABLE."]
    pub CAN_ABOM: FunctionalState,
    #[doc = "< Enable or disable the automatic wake-up mode.\nThis parameter can be set either to ENABLE or\nDISABLE."]
    pub CAN_AWUM: FunctionalState,
    #[doc = "< Enable or disable the no-automatic\nretransmission mode. This parameter can be\nset either to ENABLE or DISABLE."]
    pub CAN_NART: FunctionalState,
    #[doc = "< Enable or disable the Receive FIFO Locked mode.\nThis parameter can be set either to ENABLE\nor DISABLE."]
    pub CAN_RFLM: FunctionalState,
    #[doc = "< Enable or disable the transmit FIFO priority.\nThis parameter can be set either to ENABLE\nor DISABLE."]
    pub CAN_TXFP: FunctionalState,
}
#[test]
fn bindgen_test_layout_CAN_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CAN_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CAN_InitTypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(CAN_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_Prescaler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_Prescaler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_Mode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_SJW) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_SJW)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_BS1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_BS1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_BS2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_BS2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_TTCM) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_TTCM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_ABOM) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_ABOM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_AWUM) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_AWUM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_NART) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_NART)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_RFLM) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_RFLM)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_TXFP) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_InitTypeDef),
            "::",
            stringify!(CAN_TXFP)
        )
    );
}
#[doc = " @brief  CAN filter init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_FilterInitTypeDef {
    #[doc = "< Specifies the filter identification number (MSBs for a 32-bit\nconfiguration, first one for a 16-bit configuration).\nThis parameter can be a value between 0x0000 and 0xFFFF"]
    pub CAN_FilterIdHigh: u16,
    #[doc = "< Specifies the filter identification number (LSBs for a 32-bit\nconfiguration, second one for a 16-bit configuration).\nThis parameter can be a value between 0x0000 and 0xFFFF"]
    pub CAN_FilterIdLow: u16,
    #[doc = "< Specifies the filter mask number or identification number,\naccording to the mode (MSBs for a 32-bit configuration,\nfirst one for a 16-bit configuration).\nThis parameter can be a value between 0x0000 and 0xFFFF"]
    pub CAN_FilterMaskIdHigh: u16,
    #[doc = "< Specifies the filter mask number or identification number,\naccording to the mode (LSBs for a 32-bit configuration,\nsecond one for a 16-bit configuration).\nThis parameter can be a value between 0x0000 and 0xFFFF"]
    pub CAN_FilterMaskIdLow: u16,
    #[doc = "< Specifies the FIFO (0 or 1) which will be assigned to the filter.\nThis parameter can be a value of @ref CAN_filter_FIFO"]
    pub CAN_FilterFIFOAssignment: u16,
    #[doc = "< Specifies the filter which will be initialized. It ranges from 0 to 13."]
    pub CAN_FilterNumber: u8,
    #[doc = "< Specifies the filter mode to be initialized.\nThis parameter can be a value of @ref CAN_filter_mode"]
    pub CAN_FilterMode: u8,
    #[doc = "< Specifies the filter scale.\nThis parameter can be a value of @ref CAN_filter_scale"]
    pub CAN_FilterScale: u8,
    #[doc = "< Enable or disable the filter.\nThis parameter can be set either to ENABLE or DISABLE."]
    pub CAN_FilterActivation: FunctionalState,
}
#[test]
fn bindgen_test_layout_CAN_FilterInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CAN_FilterInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CAN_FilterInitTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(CAN_FilterInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CAN_FilterInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_FilterInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterIdHigh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterIdHigh)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterIdLow) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterIdLow)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterMaskIdHigh) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterMaskIdHigh)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterMaskIdLow) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterMaskIdLow)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterFIFOAssignment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterFIFOAssignment)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterNumber) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterNumber)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterMode) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterScale) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterScale)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CAN_FilterActivation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_FilterInitTypeDef),
            "::",
            stringify!(CAN_FilterActivation)
        )
    );
}
#[doc = " @brief  CAN Tx message structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CanTxMsg {
    #[doc = "< Specifies the standard identifier.\nThis parameter can be a value between 0 to 0x7FF."]
    pub StdId: u32,
    #[doc = "< Specifies the extended identifier.\nThis parameter can be a value between 0 to 0x1FFFFFFF."]
    pub ExtId: u32,
    #[doc = "< Specifies the type of identifier for the message that\nwill be transmitted. This parameter can be a value\nof @ref CAN_identifier_type"]
    pub IDE: u8,
    #[doc = "< Specifies the type of frame for the message that will\nbe transmitted. This parameter can be a value of\n@ref CAN_remote_transmission_request"]
    pub RTR: u8,
    #[doc = "< Specifies the length of the frame that will be\ntransmitted. This parameter can be a value between\n0 to 8"]
    pub DLC: u8,
    #[doc = "< Contains the data to be transmitted. It ranges from 0\nto 0xFF."]
    pub Data: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_CanTxMsg() {
    const UNINIT: ::core::mem::MaybeUninit<CanTxMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CanTxMsg>(),
        20usize,
        concat!("Size of: ", stringify!(CanTxMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<CanTxMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(CanTxMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).StdId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CanTxMsg),
            "::",
            stringify!(StdId)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExtId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CanTxMsg),
            "::",
            stringify!(ExtId)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IDE) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CanTxMsg),
            "::",
            stringify!(IDE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTR) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CanTxMsg),
            "::",
            stringify!(RTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DLC) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CanTxMsg),
            "::",
            stringify!(DLC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CanTxMsg),
            "::",
            stringify!(Data)
        )
    );
}
#[doc = " @brief  CAN Rx message structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CanRxMsg {
    #[doc = "< Specifies the standard identifier.\nThis parameter can be a value between 0 to 0x7FF."]
    pub StdId: u32,
    #[doc = "< Specifies the extended identifier.\nThis parameter can be a value between 0 to 0x1FFFFFFF."]
    pub ExtId: u32,
    #[doc = "< Specifies the type of identifier for the message that\nwill be received. This parameter can be a value of\n@ref CAN_identifier_type"]
    pub IDE: u8,
    #[doc = "< Specifies the type of frame for the received message.\nThis parameter can be a value of\n@ref CAN_remote_transmission_request"]
    pub RTR: u8,
    #[doc = "< Specifies the length of the frame that will be received.\nThis parameter can be a value between 0 to 8"]
    pub DLC: u8,
    #[doc = "< Contains the data to be received. It ranges from 0 to\n0xFF."]
    pub Data: [u8; 8usize],
    #[doc = "< Specifies the index of the filter the message stored in\nthe mailbox passes through. This parameter can be a\nvalue between 0 to 0xFF"]
    pub FMI: u8,
}
#[test]
fn bindgen_test_layout_CanRxMsg() {
    const UNINIT: ::core::mem::MaybeUninit<CanRxMsg> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CanRxMsg>(),
        20usize,
        concat!("Size of: ", stringify!(CanRxMsg))
    );
    assert_eq!(
        ::core::mem::align_of::<CanRxMsg>(),
        4usize,
        concat!("Alignment of ", stringify!(CanRxMsg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).StdId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CanRxMsg),
            "::",
            stringify!(StdId)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ExtId) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CanRxMsg),
            "::",
            stringify!(ExtId)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).IDE) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CanRxMsg),
            "::",
            stringify!(IDE)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RTR) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CanRxMsg),
            "::",
            stringify!(RTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DLC) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CanRxMsg),
            "::",
            stringify!(DLC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CanRxMsg),
            "::",
            stringify!(Data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FMI) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(CanRxMsg),
            "::",
            stringify!(FMI)
        )
    );
}
extern "C" {
    #[doc = " @defgroup CAN_Exported_Functions\n @{"]
    pub fn CAN_DeInit(CANx: *mut CAN_TypeDef);
}
extern "C" {
    pub fn CAN_Init(CANx: *mut CAN_TypeDef, CAN_InitStruct: *mut CAN_InitTypeDef) -> u8;
}
extern "C" {
    pub fn CAN_FilterInit(CAN_FilterInitStruct: *mut CAN_FilterInitTypeDef);
}
extern "C" {
    pub fn CAN_StructInit(CAN_InitStruct: *mut CAN_InitTypeDef);
}
extern "C" {
    pub fn CAN_SlaveStartBank(CAN_BankNumber: u8);
}
extern "C" {
    pub fn CAN_DBGFreeze(CANx: *mut CAN_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn CAN_TTComModeCmd(CANx: *mut CAN_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn CAN_Transmit(CANx: *mut CAN_TypeDef, TxMessage: *mut CanTxMsg) -> u8;
}
extern "C" {
    pub fn CAN_TransmitStatus(CANx: *mut CAN_TypeDef, TransmitMailbox: u8) -> u8;
}
extern "C" {
    pub fn CAN_CancelTransmit(CANx: *mut CAN_TypeDef, Mailbox: u8);
}
extern "C" {
    pub fn CAN_Receive(CANx: *mut CAN_TypeDef, FIFONumber: u8, RxMessage: *mut CanRxMsg);
}
extern "C" {
    pub fn CAN_FIFORelease(CANx: *mut CAN_TypeDef, FIFONumber: u8);
}
extern "C" {
    pub fn CAN_MessagePending(CANx: *mut CAN_TypeDef, FIFONumber: u8) -> u8;
}
extern "C" {
    pub fn CAN_OperatingModeRequest(CANx: *mut CAN_TypeDef, CAN_OperatingMode: u8) -> u8;
}
extern "C" {
    pub fn CAN_Sleep(CANx: *mut CAN_TypeDef) -> u8;
}
extern "C" {
    pub fn CAN_WakeUp(CANx: *mut CAN_TypeDef) -> u8;
}
extern "C" {
    pub fn CAN_GetLastErrorCode(CANx: *mut CAN_TypeDef) -> u8;
}
extern "C" {
    pub fn CAN_GetReceiveErrorCounter(CANx: *mut CAN_TypeDef) -> u8;
}
extern "C" {
    pub fn CAN_GetLSBTransmitErrorCounter(CANx: *mut CAN_TypeDef) -> u8;
}
extern "C" {
    pub fn CAN_ITConfig(CANx: *mut CAN_TypeDef, CAN_IT: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn CAN_GetFlagStatus(CANx: *mut CAN_TypeDef, CAN_FLAG: u32) -> FlagStatus;
}
extern "C" {
    pub fn CAN_ClearFlag(CANx: *mut CAN_TypeDef, CAN_FLAG: u32);
}
extern "C" {
    pub fn CAN_GetITStatus(CANx: *mut CAN_TypeDef, CAN_IT: u32) -> ITStatus;
}
extern "C" {
    pub fn CAN_ClearITPendingBit(CANx: *mut CAN_TypeDef, CAN_IT: u32);
}
#[doc = " @brief  CEC Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CEC_InitTypeDef {
    #[doc = "< Configures the CEC Bit Timing Error Mode.\nThis parameter can be a value of @ref CEC_BitTiming_Mode"]
    pub CEC_BitTimingMode: u16,
    #[doc = "< Configures the CEC Bit Period Error Mode.\nThis parameter can be a value of @ref CEC_BitPeriod_Mode"]
    pub CEC_BitPeriodMode: u16,
}
#[test]
fn bindgen_test_layout_CEC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<CEC_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CEC_InitTypeDef>(),
        4usize,
        concat!("Size of: ", stringify!(CEC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<CEC_InitTypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(CEC_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CEC_BitTimingMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_InitTypeDef),
            "::",
            stringify!(CEC_BitTimingMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CEC_BitPeriodMode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CEC_InitTypeDef),
            "::",
            stringify!(CEC_BitPeriodMode)
        )
    );
}
extern "C" {
    #[doc = " @defgroup CEC_Exported_Functions\n @{"]
    pub fn CEC_DeInit();
}
extern "C" {
    pub fn CEC_Init(CEC_InitStruct: *mut CEC_InitTypeDef);
}
extern "C" {
    pub fn CEC_Cmd(NewState: FunctionalState);
}
extern "C" {
    pub fn CEC_ITConfig(NewState: FunctionalState);
}
extern "C" {
    pub fn CEC_OwnAddressConfig(CEC_OwnAddress: u8);
}
extern "C" {
    pub fn CEC_SetPrescaler(CEC_Prescaler: u16);
}
extern "C" {
    pub fn CEC_SendDataByte(Data: u8);
}
extern "C" {
    pub fn CEC_ReceiveDataByte() -> u8;
}
extern "C" {
    pub fn CEC_StartOfMessage();
}
extern "C" {
    pub fn CEC_EndOfMessageCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn CEC_GetFlagStatus(CEC_FLAG: u32) -> FlagStatus;
}
extern "C" {
    pub fn CEC_ClearFlag(CEC_FLAG: u32);
}
extern "C" {
    pub fn CEC_GetITStatus(CEC_IT: u8) -> ITStatus;
}
extern "C" {
    pub fn CEC_ClearITPendingBit(CEC_IT: u16);
}
extern "C" {
    #[doc = " @defgroup CRC_Exported_Functions\n @{"]
    pub fn CRC_ResetDR();
}
extern "C" {
    pub fn CRC_CalcCRC(Data: u32) -> u32;
}
extern "C" {
    pub fn CRC_CalcBlockCRC(pBuffer: *mut u32, BufferLength: u32) -> u32;
}
extern "C" {
    pub fn CRC_GetCRC() -> u32;
}
extern "C" {
    pub fn CRC_SetIDRegister(IDValue: u8);
}
extern "C" {
    pub fn CRC_GetIDRegister() -> u8;
}
#[doc = " @brief  DAC Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_InitTypeDef {
    #[doc = "< Specifies the external trigger for the selected DAC channel.\nThis parameter can be a value of @ref DAC_trigger_selection"]
    pub DAC_Trigger: u32,
    #[doc = "< Specifies whether DAC channel noise waves or triangle waves\nare generated, or whether no wave is generated.\nThis parameter can be a value of @ref DAC_wave_generation"]
    pub DAC_WaveGeneration: u32,
    #[doc = "< Specifies the LFSR mask for noise wave generation or\nthe maximum amplitude triangle generation for the DAC channel.\nThis parameter can be a value of @ref DAC_lfsrunmask_triangleamplitude"]
    pub DAC_LFSRUnmask_TriangleAmplitude: u32,
    #[doc = "< Specifies whether the DAC channel output buffer is enabled or disabled.\nThis parameter can be a value of @ref DAC_output_buffer"]
    pub DAC_OutputBuffer: u32,
}
#[test]
fn bindgen_test_layout_DAC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DAC_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DAC_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(DAC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DAC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DAC_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DAC_Trigger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_InitTypeDef),
            "::",
            stringify!(DAC_Trigger)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DAC_WaveGeneration) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_InitTypeDef),
            "::",
            stringify!(DAC_WaveGeneration)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).DAC_LFSRUnmask_TriangleAmplitude) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_InitTypeDef),
            "::",
            stringify!(DAC_LFSRUnmask_TriangleAmplitude)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DAC_OutputBuffer) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_InitTypeDef),
            "::",
            stringify!(DAC_OutputBuffer)
        )
    );
}
extern "C" {
    #[doc = " @defgroup DAC_Exported_Functions\n @{"]
    pub fn DAC_DeInit();
}
extern "C" {
    pub fn DAC_Init(DAC_Channel: u32, DAC_InitStruct: *mut DAC_InitTypeDef);
}
extern "C" {
    pub fn DAC_StructInit(DAC_InitStruct: *mut DAC_InitTypeDef);
}
extern "C" {
    pub fn DAC_Cmd(DAC_Channel: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn DAC_DMACmd(DAC_Channel: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn DAC_SoftwareTriggerCmd(DAC_Channel: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn DAC_DualSoftwareTriggerCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn DAC_WaveGenerationCmd(DAC_Channel: u32, DAC_Wave: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn DAC_SetChannel1Data(DAC_Align: u32, Data: u16);
}
extern "C" {
    pub fn DAC_SetChannel2Data(DAC_Align: u32, Data: u16);
}
extern "C" {
    pub fn DAC_SetDualChannelData(DAC_Align: u32, Data2: u16, Data1: u16);
}
extern "C" {
    pub fn DAC_GetDataOutputValue(DAC_Channel: u32) -> u16;
}
extern "C" {
    #[doc = " @defgroup DBGMCU_Exported_Functions\n @{"]
    pub fn DBGMCU_GetREVID() -> u32;
}
extern "C" {
    pub fn DBGMCU_GetDEVID() -> u32;
}
extern "C" {
    pub fn DBGMCU_Config(DBGMCU_Periph: u32, NewState: FunctionalState);
}
#[doc = " @brief  DMA Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMA_InitTypeDef {
    #[doc = "< Specifies the peripheral base address for DMAy Channelx."]
    pub DMA_PeripheralBaseAddr: u32,
    #[doc = "< Specifies the memory base address for DMAy Channelx."]
    pub DMA_MemoryBaseAddr: u32,
    #[doc = "< Specifies if the peripheral is the source or destination.\nThis parameter can be a value of @ref DMA_data_transfer_direction"]
    pub DMA_DIR: u32,
    #[doc = "< Specifies the buffer size, in data unit, of the specified Channel.\nThe data unit is equal to the configuration set in DMA_PeripheralDataSize\nor DMA_MemoryDataSize members depending in the transfer direction."]
    pub DMA_BufferSize: u32,
    #[doc = "< Specifies whether the Peripheral address register is incremented or not.\nThis parameter can be a value of @ref DMA_peripheral_incremented_mode"]
    pub DMA_PeripheralInc: u32,
    #[doc = "< Specifies whether the memory address register is incremented or not.\nThis parameter can be a value of @ref DMA_memory_incremented_mode"]
    pub DMA_MemoryInc: u32,
    #[doc = "< Specifies the Peripheral data width.\nThis parameter can be a value of @ref DMA_peripheral_data_size"]
    pub DMA_PeripheralDataSize: u32,
    #[doc = "< Specifies the Memory data width.\nThis parameter can be a value of @ref DMA_memory_data_size"]
    pub DMA_MemoryDataSize: u32,
    #[doc = "< Specifies the operation mode of the DMAy Channelx.\nThis parameter can be a value of @ref DMA_circular_normal_mode.\n@note: The circular buffer mode cannot be used if the memory-to-memory\ndata transfer is configured on the selected Channel"]
    pub DMA_Mode: u32,
    #[doc = "< Specifies the software priority for the DMAy Channelx.\nThis parameter can be a value of @ref DMA_priority_level"]
    pub DMA_Priority: u32,
    #[doc = "< Specifies if the DMAy Channelx will be used in memory-to-memory transfer.\nThis parameter can be a value of @ref DMA_memory_to_memory"]
    pub DMA_M2M: u32,
}
#[test]
fn bindgen_test_layout_DMA_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<DMA_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<DMA_InitTypeDef>(),
        44usize,
        concat!("Size of: ", stringify!(DMA_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<DMA_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_PeripheralBaseAddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_PeripheralBaseAddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_MemoryBaseAddr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_MemoryBaseAddr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_DIR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_DIR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_BufferSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_BufferSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_PeripheralInc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_PeripheralInc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_MemoryInc) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_MemoryInc)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_PeripheralDataSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_PeripheralDataSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_MemoryDataSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_MemoryDataSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_Mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_Priority) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_Priority)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DMA_M2M) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_InitTypeDef),
            "::",
            stringify!(DMA_M2M)
        )
    );
}
extern "C" {
    #[doc = " @defgroup DMA_Exported_Functions\n @{"]
    pub fn DMA_DeInit(DMAy_Channelx: *mut DMA_Channel_TypeDef);
}
extern "C" {
    pub fn DMA_Init(DMAy_Channelx: *mut DMA_Channel_TypeDef, DMA_InitStruct: *mut DMA_InitTypeDef);
}
extern "C" {
    pub fn DMA_StructInit(DMA_InitStruct: *mut DMA_InitTypeDef);
}
extern "C" {
    pub fn DMA_Cmd(DMAy_Channelx: *mut DMA_Channel_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn DMA_ITConfig(
        DMAy_Channelx: *mut DMA_Channel_TypeDef,
        DMA_IT: u32,
        NewState: FunctionalState,
    );
}
extern "C" {
    pub fn DMA_SetCurrDataCounter(DMAy_Channelx: *mut DMA_Channel_TypeDef, DataNumber: u16);
}
extern "C" {
    pub fn DMA_GetCurrDataCounter(DMAy_Channelx: *mut DMA_Channel_TypeDef) -> u16;
}
extern "C" {
    pub fn DMA_GetFlagStatus(DMAy_FLAG: u32) -> FlagStatus;
}
extern "C" {
    pub fn DMA_ClearFlag(DMAy_FLAG: u32);
}
extern "C" {
    pub fn DMA_GetITStatus(DMAy_IT: u32) -> ITStatus;
}
extern "C" {
    pub fn DMA_ClearITPendingBit(DMAy_IT: u32);
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " @brief  EXTI mode enumeration"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EXTIMode_TypeDef {
    EXTI_Mode_Interrupt = 0,
    EXTI_Mode_Event = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " @brief  EXTI Trigger enumeration"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EXTITrigger_TypeDef {
    EXTI_Trigger_Rising = 8,
    EXTI_Trigger_Falling = 12,
    EXTI_Trigger_Rising_Falling = 16,
}
#[doc = " @brief  EXTI Init Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EXTI_InitTypeDef {
    #[doc = "< Specifies the EXTI lines to be enabled or disabled.\nThis parameter can be any combination of @ref EXTI_Lines"]
    pub EXTI_Line: u32,
    #[doc = "< Specifies the mode for the EXTI lines.\nThis parameter can be a value of @ref EXTIMode_TypeDef"]
    pub EXTI_Mode: EXTIMode_TypeDef,
    #[doc = "< Specifies the trigger signal active edge for the EXTI lines.\nThis parameter can be a value of @ref EXTIMode_TypeDef"]
    pub EXTI_Trigger: EXTITrigger_TypeDef,
    #[doc = "< Specifies the new state of the selected EXTI lines.\nThis parameter can be set either to ENABLE or DISABLE"]
    pub EXTI_LineCmd: FunctionalState,
}
#[test]
fn bindgen_test_layout_EXTI_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<EXTI_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<EXTI_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(EXTI_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<EXTI_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(EXTI_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXTI_Line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_InitTypeDef),
            "::",
            stringify!(EXTI_Line)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXTI_Mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_InitTypeDef),
            "::",
            stringify!(EXTI_Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXTI_Trigger) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_InitTypeDef),
            "::",
            stringify!(EXTI_Trigger)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).EXTI_LineCmd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(EXTI_InitTypeDef),
            "::",
            stringify!(EXTI_LineCmd)
        )
    );
}
extern "C" {
    #[doc = " @defgroup EXTI_Exported_Functions\n @{"]
    pub fn EXTI_DeInit();
}
extern "C" {
    pub fn EXTI_Init(EXTI_InitStruct: *mut EXTI_InitTypeDef);
}
extern "C" {
    pub fn EXTI_StructInit(EXTI_InitStruct: *mut EXTI_InitTypeDef);
}
extern "C" {
    pub fn EXTI_GenerateSWInterrupt(EXTI_Line: u32);
}
extern "C" {
    pub fn EXTI_GetFlagStatus(EXTI_Line: u32) -> FlagStatus;
}
extern "C" {
    pub fn EXTI_ClearFlag(EXTI_Line: u32);
}
extern "C" {
    pub fn EXTI_GetITStatus(EXTI_Line: u32) -> ITStatus;
}
extern "C" {
    pub fn EXTI_ClearITPendingBit(EXTI_Line: u32);
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " @brief  FLASH Status"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FLASH_Status {
    FLASH_BUSY = 1,
    FLASH_ERROR_PG = 2,
    FLASH_ERROR_WRP = 3,
    FLASH_COMPLETE = 4,
    FLASH_TIMEOUT = 5,
}
extern "C" {
    #[doc = " @defgroup FLASH_Exported_Functions\n @{"]
    pub fn FLASH_SetLatency(FLASH_Latency: u32);
}
extern "C" {
    pub fn FLASH_HalfCycleAccessCmd(FLASH_HalfCycleAccess: u32);
}
extern "C" {
    pub fn FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer: u32);
}
extern "C" {
    pub fn FLASH_Unlock();
}
extern "C" {
    pub fn FLASH_Lock();
}
extern "C" {
    pub fn FLASH_ErasePage(Page_Address: u32) -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_EraseAllPages() -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_EraseOptionBytes() -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_ProgramWord(Address: u32, Data: u32) -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_ProgramHalfWord(Address: u32, Data: u16) -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_ProgramOptionByteData(Address: u32, Data: u8) -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_EnableWriteProtection(FLASH_Pages: u32) -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_ReadOutProtection(NewState: FunctionalState) -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_UserOptionByteConfig(OB_IWDG: u16, OB_STOP: u16, OB_STDBY: u16) -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_GetUserOptionByte() -> u32;
}
extern "C" {
    pub fn FLASH_GetWriteProtectionOptionByte() -> u32;
}
extern "C" {
    pub fn FLASH_GetReadOutProtectionStatus() -> FlagStatus;
}
extern "C" {
    pub fn FLASH_GetPrefetchBufferStatus() -> FlagStatus;
}
extern "C" {
    pub fn FLASH_ITConfig(FLASH_IT: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn FLASH_GetFlagStatus(FLASH_FLAG: u32) -> FlagStatus;
}
extern "C" {
    pub fn FLASH_ClearFlag(FLASH_FLAG: u32);
}
extern "C" {
    pub fn FLASH_GetStatus() -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_WaitForLastOperation(Timeout: u32) -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_UnlockBank1();
}
extern "C" {
    pub fn FLASH_LockBank1();
}
extern "C" {
    pub fn FLASH_EraseAllBank1Pages() -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_GetBank1Status() -> FLASH_Status;
}
extern "C" {
    pub fn FLASH_WaitForLastBank1Operation(Timeout: u32) -> FLASH_Status;
}
#[doc = " @brief  Timing parameters For NOR/SRAM Banks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_NORSRAMTimingInitTypeDef {
    #[doc = "< Defines the number of HCLK cycles to configure\nthe duration of the address setup time.\nThis parameter can be a value between 0 and 0xF.\n@note: It is not used with synchronous NOR Flash memories."]
    pub FSMC_AddressSetupTime: u32,
    #[doc = "< Defines the number of HCLK cycles to configure\nthe duration of the address hold time.\nThis parameter can be a value between 0 and 0xF.\n@note: It is not used with synchronous NOR Flash memories."]
    pub FSMC_AddressHoldTime: u32,
    #[doc = "< Defines the number of HCLK cycles to configure\nthe duration of the data setup time.\nThis parameter can be a value between 0 and 0xFF.\n@note: It is used for SRAMs, ROMs and asynchronous multiplexed NOR Flash memories."]
    pub FSMC_DataSetupTime: u32,
    #[doc = "< Defines the number of HCLK cycles to configure\nthe duration of the bus turnaround.\nThis parameter can be a value between 0 and 0xF.\n@note: It is only used for multiplexed NOR Flash memories."]
    pub FSMC_BusTurnAroundDuration: u32,
    #[doc = "< Defines the period of CLK clock output signal, expressed in number of HCLK cycles.\nThis parameter can be a value between 1 and 0xF.\n@note: This parameter is not used for asynchronous NOR Flash, SRAM or ROM accesses."]
    pub FSMC_CLKDivision: u32,
    #[doc = "< Defines the number of memory clock cycles to issue\nto the memory before getting the first data.\nThe value of this parameter depends on the memory type as shown below:\n- It must be set to 0 in case of a CRAM\n- It is don't care in asynchronous NOR, SRAM or ROM accesses\n- It may assume a value between 0 and 0xF in NOR Flash memories\nwith synchronous burst mode enable"]
    pub FSMC_DataLatency: u32,
    #[doc = "< Specifies the asynchronous access mode.\nThis parameter can be a value of @ref FSMC_Access_Mode"]
    pub FSMC_AccessMode: u32,
}
#[test]
fn bindgen_test_layout_FSMC_NORSRAMTimingInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_NORSRAMTimingInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_NORSRAMTimingInitTypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(FSMC_NORSRAMTimingInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_NORSRAMTimingInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_NORSRAMTimingInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_AddressSetupTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMTimingInitTypeDef),
            "::",
            stringify!(FSMC_AddressSetupTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_AddressHoldTime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMTimingInitTypeDef),
            "::",
            stringify!(FSMC_AddressHoldTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_DataSetupTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMTimingInitTypeDef),
            "::",
            stringify!(FSMC_DataSetupTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_BusTurnAroundDuration) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMTimingInitTypeDef),
            "::",
            stringify!(FSMC_BusTurnAroundDuration)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_CLKDivision) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMTimingInitTypeDef),
            "::",
            stringify!(FSMC_CLKDivision)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_DataLatency) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMTimingInitTypeDef),
            "::",
            stringify!(FSMC_DataLatency)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_AccessMode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMTimingInitTypeDef),
            "::",
            stringify!(FSMC_AccessMode)
        )
    );
}
#[doc = " @brief  FSMC NOR/SRAM Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_NORSRAMInitTypeDef {
    #[doc = "< Specifies the NOR/SRAM memory bank that will be used.\nThis parameter can be a value of @ref FSMC_NORSRAM_Bank"]
    pub FSMC_Bank: u32,
    #[doc = "< Specifies whether the address and data values are\nmultiplexed on the databus or not.\nThis parameter can be a value of @ref FSMC_Data_Address_Bus_Multiplexing"]
    pub FSMC_DataAddressMux: u32,
    #[doc = "< Specifies the type of external memory attached to\nthe corresponding memory bank.\nThis parameter can be a value of @ref FSMC_Memory_Type"]
    pub FSMC_MemoryType: u32,
    #[doc = "< Specifies the external memory device width.\nThis parameter can be a value of @ref FSMC_Data_Width"]
    pub FSMC_MemoryDataWidth: u32,
    #[doc = "< Enables or disables the burst access mode for Flash memory,\nvalid only with synchronous burst Flash memories.\nThis parameter can be a value of @ref FSMC_Burst_Access_Mode"]
    pub FSMC_BurstAccessMode: u32,
    #[doc = "< Enables or disables wait signal during asynchronous transfers,\nvalid only with asynchronous Flash memories.\nThis parameter can be a value of @ref FSMC_AsynchronousWait"]
    pub FSMC_AsynchronousWait: u32,
    #[doc = "< Specifies the wait signal polarity, valid only when accessing\nthe Flash memory in burst mode.\nThis parameter can be a value of @ref FSMC_Wait_Signal_Polarity"]
    pub FSMC_WaitSignalPolarity: u32,
    #[doc = "< Enables or disables the Wrapped burst access mode for Flash\nmemory, valid only when accessing Flash memories in burst mode.\nThis parameter can be a value of @ref FSMC_Wrap_Mode"]
    pub FSMC_WrapMode: u32,
    #[doc = "< Specifies if the wait signal is asserted by the memory one\nclock cycle before the wait state or during the wait state,\nvalid only when accessing memories in burst mode.\nThis parameter can be a value of @ref FSMC_Wait_Timing"]
    pub FSMC_WaitSignalActive: u32,
    #[doc = "< Enables or disables the write operation in the selected bank by the FSMC.\nThis parameter can be a value of @ref FSMC_Write_Operation"]
    pub FSMC_WriteOperation: u32,
    #[doc = "< Enables or disables the wait-state insertion via wait\nsignal, valid for Flash memory access in burst mode.\nThis parameter can be a value of @ref FSMC_Wait_Signal"]
    pub FSMC_WaitSignal: u32,
    #[doc = "< Enables or disables the extended mode.\nThis parameter can be a value of @ref FSMC_Extended_Mode"]
    pub FSMC_ExtendedMode: u32,
    #[doc = "< Enables or disables the write burst operation.\nThis parameter can be a value of @ref FSMC_Write_Burst"]
    pub FSMC_WriteBurst: u32,
    #[doc = "< Timing Parameters for write and read access if the  ExtendedMode is not used"]
    pub FSMC_ReadWriteTimingStruct: *mut FSMC_NORSRAMTimingInitTypeDef,
    #[doc = "< Timing Parameters for write access if the  ExtendedMode is used"]
    pub FSMC_WriteTimingStruct: *mut FSMC_NORSRAMTimingInitTypeDef,
}
#[test]
fn bindgen_test_layout_FSMC_NORSRAMInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_NORSRAMInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_NORSRAMInitTypeDef>(),
        60usize,
        concat!("Size of: ", stringify!(FSMC_NORSRAMInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_NORSRAMInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_NORSRAMInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_Bank) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_Bank)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_DataAddressMux) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_DataAddressMux)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_MemoryType) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_MemoryType)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_MemoryDataWidth) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_MemoryDataWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_BurstAccessMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_BurstAccessMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_AsynchronousWait) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_AsynchronousWait)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_WaitSignalPolarity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_WaitSignalPolarity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_WrapMode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_WrapMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_WaitSignalActive) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_WaitSignalActive)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_WriteOperation) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_WriteOperation)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_WaitSignal) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_WaitSignal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_ExtendedMode) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_ExtendedMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_WriteBurst) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_WriteBurst)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_ReadWriteTimingStruct) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_ReadWriteTimingStruct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_WriteTimingStruct) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NORSRAMInitTypeDef),
            "::",
            stringify!(FSMC_WriteTimingStruct)
        )
    );
}
#[doc = " @brief  Timing parameters For FSMC NAND and PCCARD Banks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_NAND_PCCARDTimingInitTypeDef {
    #[doc = "< Defines the number of HCLK cycles to setup address before\nthe command assertion for NAND-Flash read or write access\nto common/Attribute or I/O memory space (depending on\nthe memory space timing to be configured).\nThis parameter can be a value between 0 and 0xFF."]
    pub FSMC_SetupTime: u32,
    #[doc = "< Defines the minimum number of HCLK cycles to assert the\ncommand for NAND-Flash read or write access to\ncommon/Attribute or I/O memory space (depending on the\nmemory space timing to be configured).\nThis parameter can be a number between 0x00 and 0xFF"]
    pub FSMC_WaitSetupTime: u32,
    #[doc = "< Defines the number of HCLK clock cycles to hold address\n(and data for write access) after the command deassertion\nfor NAND-Flash read or write access to common/Attribute\nor I/O memory space (depending on the memory space timing\nto be configured).\nThis parameter can be a number between 0x00 and 0xFF"]
    pub FSMC_HoldSetupTime: u32,
    #[doc = "< Defines the number of HCLK clock cycles during which the\ndatabus is kept in HiZ after the start of a NAND-Flash\nwrite access to common/Attribute or I/O memory space (depending\non the memory space timing to be configured).\nThis parameter can be a number between 0x00 and 0xFF"]
    pub FSMC_HiZSetupTime: u32,
}
#[test]
fn bindgen_test_layout_FSMC_NAND_PCCARDTimingInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_NAND_PCCARDTimingInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_NAND_PCCARDTimingInitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(FSMC_NAND_PCCARDTimingInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_NAND_PCCARDTimingInitTypeDef>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FSMC_NAND_PCCARDTimingInitTypeDef)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_SetupTime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NAND_PCCARDTimingInitTypeDef),
            "::",
            stringify!(FSMC_SetupTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_WaitSetupTime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NAND_PCCARDTimingInitTypeDef),
            "::",
            stringify!(FSMC_WaitSetupTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_HoldSetupTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NAND_PCCARDTimingInitTypeDef),
            "::",
            stringify!(FSMC_HoldSetupTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_HiZSetupTime) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NAND_PCCARDTimingInitTypeDef),
            "::",
            stringify!(FSMC_HiZSetupTime)
        )
    );
}
#[doc = " @brief  FSMC NAND Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_NANDInitTypeDef {
    #[doc = "< Specifies the NAND memory bank that will be used.\nThis parameter can be a value of @ref FSMC_NAND_Bank"]
    pub FSMC_Bank: u32,
    #[doc = "< Enables or disables the Wait feature for the NAND Memory Bank.\nThis parameter can be any value of @ref FSMC_Wait_feature"]
    pub FSMC_Waitfeature: u32,
    #[doc = "< Specifies the external memory device width.\nThis parameter can be any value of @ref FSMC_Data_Width"]
    pub FSMC_MemoryDataWidth: u32,
    #[doc = "< Enables or disables the ECC computation.\nThis parameter can be any value of @ref FSMC_ECC"]
    pub FSMC_ECC: u32,
    #[doc = "< Defines the page size for the extended ECC.\nThis parameter can be any value of @ref FSMC_ECC_Page_Size"]
    pub FSMC_ECCPageSize: u32,
    #[doc = "< Defines the number of HCLK cycles to configure the\ndelay between CLE low and RE low.\nThis parameter can be a value between 0 and 0xFF."]
    pub FSMC_TCLRSetupTime: u32,
    #[doc = "< Defines the number of HCLK cycles to configure the\ndelay between ALE low and RE low.\nThis parameter can be a number between 0x0 and 0xFF"]
    pub FSMC_TARSetupTime: u32,
    #[doc = "< FSMC Common Space Timing"]
    pub FSMC_CommonSpaceTimingStruct: *mut FSMC_NAND_PCCARDTimingInitTypeDef,
    #[doc = "< FSMC Attribute Space Timing"]
    pub FSMC_AttributeSpaceTimingStruct: *mut FSMC_NAND_PCCARDTimingInitTypeDef,
}
#[test]
fn bindgen_test_layout_FSMC_NANDInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_NANDInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_NANDInitTypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(FSMC_NANDInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_NANDInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_NANDInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_Bank) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_Bank)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_Waitfeature) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_Waitfeature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_MemoryDataWidth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_MemoryDataWidth)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_ECC) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_ECC)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_ECCPageSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_ECCPageSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_TCLRSetupTime) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_TCLRSetupTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_TARSetupTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_TARSetupTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FSMC_CommonSpaceTimingStruct) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_CommonSpaceTimingStruct)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FSMC_AttributeSpaceTimingStruct) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_NANDInitTypeDef),
            "::",
            stringify!(FSMC_AttributeSpaceTimingStruct)
        )
    );
}
#[doc = " @brief  FSMC PCCARD Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSMC_PCCARDInitTypeDef {
    #[doc = "< Enables or disables the Wait feature for the Memory Bank.\nThis parameter can be any value of @ref FSMC_Wait_feature"]
    pub FSMC_Waitfeature: u32,
    #[doc = "< Defines the number of HCLK cycles to configure the\ndelay between CLE low and RE low.\nThis parameter can be a value between 0 and 0xFF."]
    pub FSMC_TCLRSetupTime: u32,
    #[doc = "< Defines the number of HCLK cycles to configure the\ndelay between ALE low and RE low.\nThis parameter can be a number between 0x0 and 0xFF"]
    pub FSMC_TARSetupTime: u32,
    #[doc = "< FSMC Common Space Timing"]
    pub FSMC_CommonSpaceTimingStruct: *mut FSMC_NAND_PCCARDTimingInitTypeDef,
    #[doc = "< FSMC Attribute Space Timing"]
    pub FSMC_AttributeSpaceTimingStruct: *mut FSMC_NAND_PCCARDTimingInitTypeDef,
    #[doc = "< FSMC IO Space Timing"]
    pub FSMC_IOSpaceTimingStruct: *mut FSMC_NAND_PCCARDTimingInitTypeDef,
}
#[test]
fn bindgen_test_layout_FSMC_PCCARDInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<FSMC_PCCARDInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<FSMC_PCCARDInitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(FSMC_PCCARDInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<FSMC_PCCARDInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(FSMC_PCCARDInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_Waitfeature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_PCCARDInitTypeDef),
            "::",
            stringify!(FSMC_Waitfeature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_TCLRSetupTime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_PCCARDInitTypeDef),
            "::",
            stringify!(FSMC_TCLRSetupTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_TARSetupTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_PCCARDInitTypeDef),
            "::",
            stringify!(FSMC_TARSetupTime)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FSMC_CommonSpaceTimingStruct) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_PCCARDInitTypeDef),
            "::",
            stringify!(FSMC_CommonSpaceTimingStruct)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).FSMC_AttributeSpaceTimingStruct) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_PCCARDInitTypeDef),
            "::",
            stringify!(FSMC_AttributeSpaceTimingStruct)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).FSMC_IOSpaceTimingStruct) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FSMC_PCCARDInitTypeDef),
            "::",
            stringify!(FSMC_IOSpaceTimingStruct)
        )
    );
}
extern "C" {
    #[doc = " @defgroup FSMC_Exported_Functions\n @{"]
    pub fn FSMC_NORSRAMDeInit(FSMC_Bank: u32);
}
extern "C" {
    pub fn FSMC_NANDDeInit(FSMC_Bank: u32);
}
extern "C" {
    pub fn FSMC_PCCARDDeInit();
}
extern "C" {
    pub fn FSMC_NORSRAMInit(FSMC_NORSRAMInitStruct: *mut FSMC_NORSRAMInitTypeDef);
}
extern "C" {
    pub fn FSMC_NANDInit(FSMC_NANDInitStruct: *mut FSMC_NANDInitTypeDef);
}
extern "C" {
    pub fn FSMC_PCCARDInit(FSMC_PCCARDInitStruct: *mut FSMC_PCCARDInitTypeDef);
}
extern "C" {
    pub fn FSMC_NORSRAMStructInit(FSMC_NORSRAMInitStruct: *mut FSMC_NORSRAMInitTypeDef);
}
extern "C" {
    pub fn FSMC_NANDStructInit(FSMC_NANDInitStruct: *mut FSMC_NANDInitTypeDef);
}
extern "C" {
    pub fn FSMC_PCCARDStructInit(FSMC_PCCARDInitStruct: *mut FSMC_PCCARDInitTypeDef);
}
extern "C" {
    pub fn FSMC_NORSRAMCmd(FSMC_Bank: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn FSMC_NANDCmd(FSMC_Bank: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn FSMC_PCCARDCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn FSMC_NANDECCCmd(FSMC_Bank: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn FSMC_GetECC(FSMC_Bank: u32) -> u32;
}
extern "C" {
    pub fn FSMC_ITConfig(FSMC_Bank: u32, FSMC_IT: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn FSMC_GetFlagStatus(FSMC_Bank: u32, FSMC_FLAG: u32) -> FlagStatus;
}
extern "C" {
    pub fn FSMC_ClearFlag(FSMC_Bank: u32, FSMC_FLAG: u32);
}
extern "C" {
    pub fn FSMC_GetITStatus(FSMC_Bank: u32, FSMC_IT: u32) -> ITStatus;
}
extern "C" {
    pub fn FSMC_ClearITPendingBit(FSMC_Bank: u32, FSMC_IT: u32);
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " @brief  Output Maximum frequency selection"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GPIOSpeed_TypeDef {
    GPIO_Speed_10MHz = 1,
    GPIO_Speed_2MHz = 2,
    GPIO_Speed_50MHz = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " @brief  Configuration Mode enumeration"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GPIOMode_TypeDef {
    GPIO_Mode_AIN = 0,
    GPIO_Mode_IN_FLOATING = 4,
    GPIO_Mode_IPD = 40,
    GPIO_Mode_IPU = 72,
    GPIO_Mode_Out_OD = 20,
    GPIO_Mode_Out_PP = 16,
    GPIO_Mode_AF_OD = 28,
    GPIO_Mode_AF_PP = 24,
}
#[doc = " @brief  GPIO Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_InitTypeDef {
    #[doc = "< Specifies the GPIO pins to be configured.\nThis parameter can be any value of @ref GPIO_pins_define"]
    pub GPIO_Pin: u16,
    #[doc = "< Specifies the speed for the selected pins.\nThis parameter can be a value of @ref GPIOSpeed_TypeDef"]
    pub GPIO_Speed: GPIOSpeed_TypeDef,
    #[doc = "< Specifies the operating mode for the selected pins.\nThis parameter can be a value of @ref GPIOMode_TypeDef"]
    pub GPIO_Mode: GPIOMode_TypeDef,
}
#[test]
fn bindgen_test_layout_GPIO_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<GPIO_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<GPIO_InitTypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(GPIO_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<GPIO_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(GPIO_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GPIO_Pin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(GPIO_Pin)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GPIO_Speed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(GPIO_Speed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).GPIO_Mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_InitTypeDef),
            "::",
            stringify!(GPIO_Mode)
        )
    );
}
#[repr(u32)]
#[non_exhaustive]
#[doc = " @brief  Bit_SET and Bit_RESET enumeration"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BitAction {
    Bit_RESET = 0,
    Bit_SET = 1,
}
extern "C" {
    #[doc = " @defgroup GPIO_Exported_Functions\n @{"]
    pub fn GPIO_DeInit(GPIOx: *mut GPIO_TypeDef);
}
extern "C" {
    pub fn GPIO_AFIODeInit();
}
extern "C" {
    pub fn GPIO_Init(GPIOx: *mut GPIO_TypeDef, GPIO_InitStruct: *mut GPIO_InitTypeDef);
}
extern "C" {
    pub fn GPIO_StructInit(GPIO_InitStruct: *mut GPIO_InitTypeDef);
}
extern "C" {
    pub fn GPIO_ReadInputDataBit(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16) -> u8;
}
extern "C" {
    pub fn GPIO_ReadInputData(GPIOx: *mut GPIO_TypeDef) -> u16;
}
extern "C" {
    pub fn GPIO_ReadOutputDataBit(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16) -> u8;
}
extern "C" {
    pub fn GPIO_ReadOutputData(GPIOx: *mut GPIO_TypeDef) -> u16;
}
extern "C" {
    pub fn GPIO_SetBits(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16);
}
extern "C" {
    pub fn GPIO_ResetBits(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16);
}
extern "C" {
    pub fn GPIO_WriteBit(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16, BitVal: BitAction);
}
extern "C" {
    pub fn GPIO_Write(GPIOx: *mut GPIO_TypeDef, PortVal: u16);
}
extern "C" {
    pub fn GPIO_PinLockConfig(GPIOx: *mut GPIO_TypeDef, GPIO_Pin: u16);
}
extern "C" {
    pub fn GPIO_EventOutputConfig(GPIO_PortSource: u8, GPIO_PinSource: u8);
}
extern "C" {
    pub fn GPIO_EventOutputCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn GPIO_PinRemapConfig(GPIO_Remap: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn GPIO_EXTILineConfig(GPIO_PortSource: u8, GPIO_PinSource: u8);
}
extern "C" {
    pub fn GPIO_ETH_MediaInterfaceConfig(GPIO_ETH_MediaInterface: u32);
}
#[doc = " @brief  I2C Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2C_InitTypeDef {
    #[doc = "< Specifies the clock frequency.\nThis parameter must be set to a value lower than 400kHz"]
    pub I2C_ClockSpeed: u32,
    #[doc = "< Specifies the I2C mode.\nThis parameter can be a value of @ref I2C_mode"]
    pub I2C_Mode: u16,
    #[doc = "< Specifies the I2C fast mode duty cycle.\nThis parameter can be a value of @ref I2C_duty_cycle_in_fast_mode"]
    pub I2C_DutyCycle: u16,
    #[doc = "< Specifies the first device own address.\nThis parameter can be a 7-bit or 10-bit address."]
    pub I2C_OwnAddress1: u16,
    #[doc = "< Enables or disables the acknowledgement.\nThis parameter can be a value of @ref I2C_acknowledgement"]
    pub I2C_Ack: u16,
    #[doc = "< Specifies if 7-bit or 10-bit address is acknowledged.\nThis parameter can be a value of @ref I2C_acknowledged_address"]
    pub I2C_AcknowledgedAddress: u16,
}
#[test]
fn bindgen_test_layout_I2C_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<I2C_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2C_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(I2C_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<I2C_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(I2C_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2C_ClockSpeed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(I2C_ClockSpeed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2C_Mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(I2C_Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2C_DutyCycle) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(I2C_DutyCycle)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2C_OwnAddress1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(I2C_OwnAddress1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2C_Ack) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(I2C_Ack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2C_AcknowledgedAddress) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_InitTypeDef),
            "::",
            stringify!(I2C_AcknowledgedAddress)
        )
    );
}
extern "C" {
    #[doc = " @defgroup I2C_Exported_Functions\n @{"]
    pub fn I2C_DeInit(I2Cx: *mut I2C_TypeDef);
}
extern "C" {
    pub fn I2C_Init(I2Cx: *mut I2C_TypeDef, I2C_InitStruct: *mut I2C_InitTypeDef);
}
extern "C" {
    pub fn I2C_StructInit(I2C_InitStruct: *mut I2C_InitTypeDef);
}
extern "C" {
    pub fn I2C_Cmd(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_DMACmd(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_DMALastTransferCmd(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_GenerateSTART(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_GenerateSTOP(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_AcknowledgeConfig(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_OwnAddress2Config(I2Cx: *mut I2C_TypeDef, Address: u8);
}
extern "C" {
    pub fn I2C_DualAddressCmd(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_GeneralCallCmd(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_ITConfig(I2Cx: *mut I2C_TypeDef, I2C_IT: u16, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_SendData(I2Cx: *mut I2C_TypeDef, Data: u8);
}
extern "C" {
    pub fn I2C_ReceiveData(I2Cx: *mut I2C_TypeDef) -> u8;
}
extern "C" {
    pub fn I2C_Send7bitAddress(I2Cx: *mut I2C_TypeDef, Address: u8, I2C_Direction: u8);
}
extern "C" {
    pub fn I2C_ReadRegister(I2Cx: *mut I2C_TypeDef, I2C_Register: u8) -> u16;
}
extern "C" {
    pub fn I2C_SoftwareResetCmd(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_NACKPositionConfig(I2Cx: *mut I2C_TypeDef, I2C_NACKPosition: u16);
}
extern "C" {
    pub fn I2C_SMBusAlertConfig(I2Cx: *mut I2C_TypeDef, I2C_SMBusAlert: u16);
}
extern "C" {
    pub fn I2C_TransmitPEC(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_PECPositionConfig(I2Cx: *mut I2C_TypeDef, I2C_PECPosition: u16);
}
extern "C" {
    pub fn I2C_CalculatePEC(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_GetPEC(I2Cx: *mut I2C_TypeDef) -> u8;
}
extern "C" {
    pub fn I2C_ARPCmd(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_StretchClockCmd(I2Cx: *mut I2C_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2C_FastModeDutyCycleConfig(I2Cx: *mut I2C_TypeDef, I2C_DutyCycle: u16);
}
extern "C" {
    #[doc = "  1) Basic state monitoring\n"]
    pub fn I2C_CheckEvent(I2Cx: *mut I2C_TypeDef, I2C_EVENT: u32) -> ErrorStatus;
}
extern "C" {
    #[doc = "  2) Advanced state monitoring\n"]
    pub fn I2C_GetLastEvent(I2Cx: *mut I2C_TypeDef) -> u32;
}
extern "C" {
    #[doc = "  3) Flag-based state monitoring\n"]
    pub fn I2C_GetFlagStatus(I2Cx: *mut I2C_TypeDef, I2C_FLAG: u32) -> FlagStatus;
}
extern "C" {
    pub fn I2C_ClearFlag(I2Cx: *mut I2C_TypeDef, I2C_FLAG: u32);
}
extern "C" {
    pub fn I2C_GetITStatus(I2Cx: *mut I2C_TypeDef, I2C_IT: u32) -> ITStatus;
}
extern "C" {
    pub fn I2C_ClearITPendingBit(I2Cx: *mut I2C_TypeDef, I2C_IT: u32);
}
extern "C" {
    #[doc = " @defgroup IWDG_Exported_Functions\n @{"]
    pub fn IWDG_WriteAccessCmd(IWDG_WriteAccess: u16);
}
extern "C" {
    pub fn IWDG_SetPrescaler(IWDG_Prescaler: u8);
}
extern "C" {
    pub fn IWDG_SetReload(Reload: u16);
}
extern "C" {
    pub fn IWDG_ReloadCounter();
}
extern "C" {
    pub fn IWDG_Enable();
}
extern "C" {
    pub fn IWDG_GetFlagStatus(IWDG_FLAG: u16) -> FlagStatus;
}
extern "C" {
    #[doc = " @defgroup PWR_Exported_Functions\n @{"]
    pub fn PWR_DeInit();
}
extern "C" {
    pub fn PWR_BackupAccessCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn PWR_PVDCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn PWR_PVDLevelConfig(PWR_PVDLevel: u32);
}
extern "C" {
    pub fn PWR_WakeUpPinCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn PWR_EnterSTOPMode(PWR_Regulator: u32, PWR_STOPEntry: u8);
}
extern "C" {
    pub fn PWR_EnterSTANDBYMode();
}
extern "C" {
    pub fn PWR_GetFlagStatus(PWR_FLAG: u32) -> FlagStatus;
}
extern "C" {
    pub fn PWR_ClearFlag(PWR_FLAG: u32);
}
#[doc = " @defgroup RCC_Exported_Types\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCC_ClocksTypeDef {
    #[doc = "< returns SYSCLK clock frequency expressed in Hz"]
    pub SYSCLK_Frequency: u32,
    #[doc = "< returns HCLK clock frequency expressed in Hz"]
    pub HCLK_Frequency: u32,
    #[doc = "< returns PCLK1 clock frequency expressed in Hz"]
    pub PCLK1_Frequency: u32,
    #[doc = "< returns PCLK2 clock frequency expressed in Hz"]
    pub PCLK2_Frequency: u32,
    #[doc = "< returns ADCCLK clock frequency expressed in Hz"]
    pub ADCCLK_Frequency: u32,
}
#[test]
fn bindgen_test_layout_RCC_ClocksTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<RCC_ClocksTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<RCC_ClocksTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(RCC_ClocksTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<RCC_ClocksTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(RCC_ClocksTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SYSCLK_Frequency) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClocksTypeDef),
            "::",
            stringify!(SYSCLK_Frequency)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).HCLK_Frequency) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClocksTypeDef),
            "::",
            stringify!(HCLK_Frequency)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCLK1_Frequency) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClocksTypeDef),
            "::",
            stringify!(PCLK1_Frequency)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PCLK2_Frequency) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClocksTypeDef),
            "::",
            stringify!(PCLK2_Frequency)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ADCCLK_Frequency) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RCC_ClocksTypeDef),
            "::",
            stringify!(ADCCLK_Frequency)
        )
    );
}
extern "C" {
    #[doc = " @defgroup RCC_Exported_Functions\n @{"]
    pub fn RCC_DeInit();
}
extern "C" {
    pub fn RCC_HSEConfig(RCC_HSE: u32);
}
extern "C" {
    pub fn RCC_WaitForHSEStartUp() -> ErrorStatus;
}
extern "C" {
    pub fn RCC_AdjustHSICalibrationValue(HSICalibrationValue: u8);
}
extern "C" {
    pub fn RCC_HSICmd(NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_PLLConfig(RCC_PLLSource: u32, RCC_PLLMul: u32);
}
extern "C" {
    pub fn RCC_PLLCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_SYSCLKConfig(RCC_SYSCLKSource: u32);
}
extern "C" {
    pub fn RCC_GetSYSCLKSource() -> u8;
}
extern "C" {
    pub fn RCC_HCLKConfig(RCC_SYSCLK: u32);
}
extern "C" {
    pub fn RCC_PCLK1Config(RCC_HCLK: u32);
}
extern "C" {
    pub fn RCC_PCLK2Config(RCC_HCLK: u32);
}
extern "C" {
    pub fn RCC_ITConfig(RCC_IT: u8, NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_USBCLKConfig(RCC_USBCLKSource: u32);
}
extern "C" {
    pub fn RCC_ADCCLKConfig(RCC_PCLK2: u32);
}
extern "C" {
    pub fn RCC_LSEConfig(RCC_LSE: u8);
}
extern "C" {
    pub fn RCC_LSICmd(NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_RTCCLKConfig(RCC_RTCCLKSource: u32);
}
extern "C" {
    pub fn RCC_RTCCLKCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_GetClocksFreq(RCC_Clocks: *mut RCC_ClocksTypeDef);
}
extern "C" {
    pub fn RCC_AHBPeriphClockCmd(RCC_AHBPeriph: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_APB2PeriphClockCmd(RCC_APB2Periph: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_APB1PeriphClockCmd(RCC_APB1Periph: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_APB2PeriphResetCmd(RCC_APB2Periph: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_APB1PeriphResetCmd(RCC_APB1Periph: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_BackupResetCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_ClockSecuritySystemCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn RCC_MCOConfig(RCC_MCO: u8);
}
extern "C" {
    pub fn RCC_GetFlagStatus(RCC_FLAG: u8) -> FlagStatus;
}
extern "C" {
    pub fn RCC_ClearFlag();
}
extern "C" {
    pub fn RCC_GetITStatus(RCC_IT: u8) -> ITStatus;
}
extern "C" {
    pub fn RCC_ClearITPendingBit(RCC_IT: u8);
}
extern "C" {
    #[doc = " @defgroup RTC_Exported_Functions\n @{"]
    pub fn RTC_ITConfig(RTC_IT: u16, NewState: FunctionalState);
}
extern "C" {
    pub fn RTC_EnterConfigMode();
}
extern "C" {
    pub fn RTC_ExitConfigMode();
}
extern "C" {
    pub fn RTC_GetCounter() -> u32;
}
extern "C" {
    pub fn RTC_SetCounter(CounterValue: u32);
}
extern "C" {
    pub fn RTC_SetPrescaler(PrescalerValue: u32);
}
extern "C" {
    pub fn RTC_SetAlarm(AlarmValue: u32);
}
extern "C" {
    pub fn RTC_GetDivider() -> u32;
}
extern "C" {
    pub fn RTC_WaitForLastTask();
}
extern "C" {
    pub fn RTC_WaitForSynchro();
}
extern "C" {
    pub fn RTC_GetFlagStatus(RTC_FLAG: u16) -> FlagStatus;
}
extern "C" {
    pub fn RTC_ClearFlag(RTC_FLAG: u16);
}
extern "C" {
    pub fn RTC_GetITStatus(RTC_IT: u16) -> ITStatus;
}
extern "C" {
    pub fn RTC_ClearITPendingBit(RTC_IT: u16);
}
#[doc = " @defgroup SDIO_Exported_Types\n @{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDIO_InitTypeDef {
    #[doc = "< Specifies the clock transition on which the bit capture is made.\nThis parameter can be a value of @ref SDIO_Clock_Edge"]
    pub SDIO_ClockEdge: u32,
    #[doc = "< Specifies whether the SDIO Clock divider bypass is\nenabled or disabled.\nThis parameter can be a value of @ref SDIO_Clock_Bypass"]
    pub SDIO_ClockBypass: u32,
    #[doc = "< Specifies whether SDIO Clock output is enabled or\ndisabled when the bus is idle.\nThis parameter can be a value of @ref SDIO_Clock_Power_Save"]
    pub SDIO_ClockPowerSave: u32,
    #[doc = "< Specifies the SDIO bus width.\nThis parameter can be a value of @ref SDIO_Bus_Wide"]
    pub SDIO_BusWide: u32,
    #[doc = "< Specifies whether the SDIO hardware flow control is enabled or disabled.\nThis parameter can be a value of @ref SDIO_Hardware_Flow_Control"]
    pub SDIO_HardwareFlowControl: u32,
    #[doc = "< Specifies the clock frequency of the SDIO controller.\nThis parameter can be a value between 0x00 and 0xFF."]
    pub SDIO_ClockDiv: u8,
}
#[test]
fn bindgen_test_layout_SDIO_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDIO_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDIO_InitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(SDIO_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDIO_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDIO_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_ClockEdge) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_InitTypeDef),
            "::",
            stringify!(SDIO_ClockEdge)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_ClockBypass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_InitTypeDef),
            "::",
            stringify!(SDIO_ClockBypass)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_ClockPowerSave) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_InitTypeDef),
            "::",
            stringify!(SDIO_ClockPowerSave)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_BusWide) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_InitTypeDef),
            "::",
            stringify!(SDIO_BusWide)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_HardwareFlowControl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_InitTypeDef),
            "::",
            stringify!(SDIO_HardwareFlowControl)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_ClockDiv) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_InitTypeDef),
            "::",
            stringify!(SDIO_ClockDiv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDIO_CmdInitTypeDef {
    #[doc = "< Specifies the SDIO command argument which is sent\nto a card as part of a command message. If a command\ncontains an argument, it must be loaded into this register\nbefore writing the command to the command register"]
    pub SDIO_Argument: u32,
    #[doc = "< Specifies the SDIO command index. It must be lower than 0x40."]
    pub SDIO_CmdIndex: u32,
    #[doc = "< Specifies the SDIO response type.\nThis parameter can be a value of @ref SDIO_Response_Type"]
    pub SDIO_Response: u32,
    #[doc = "< Specifies whether SDIO wait-for-interrupt request is enabled or disabled.\nThis parameter can be a value of @ref SDIO_Wait_Interrupt_State"]
    pub SDIO_Wait: u32,
    #[doc = "< Specifies whether SDIO Command path state machine (CPSM)\nis enabled or disabled.\nThis parameter can be a value of @ref SDIO_CPSM_State"]
    pub SDIO_CPSM: u32,
}
#[test]
fn bindgen_test_layout_SDIO_CmdInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDIO_CmdInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDIO_CmdInitTypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(SDIO_CmdInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDIO_CmdInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDIO_CmdInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_Argument) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_CmdInitTypeDef),
            "::",
            stringify!(SDIO_Argument)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_CmdIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_CmdInitTypeDef),
            "::",
            stringify!(SDIO_CmdIndex)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_Response) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_CmdInitTypeDef),
            "::",
            stringify!(SDIO_Response)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_Wait) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_CmdInitTypeDef),
            "::",
            stringify!(SDIO_Wait)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_CPSM) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_CmdInitTypeDef),
            "::",
            stringify!(SDIO_CPSM)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDIO_DataInitTypeDef {
    #[doc = "< Specifies the data timeout period in card bus clock periods."]
    pub SDIO_DataTimeOut: u32,
    #[doc = "< Specifies the number of data bytes to be transferred."]
    pub SDIO_DataLength: u32,
    #[doc = "< Specifies the data block size for block transfer.\nThis parameter can be a value of @ref SDIO_Data_Block_Size"]
    pub SDIO_DataBlockSize: u32,
    #[doc = "< Specifies the data transfer direction, whether the transfer\nis a read or write.\nThis parameter can be a value of @ref SDIO_Transfer_Direction"]
    pub SDIO_TransferDir: u32,
    #[doc = "< Specifies whether data transfer is in stream or block mode.\nThis parameter can be a value of @ref SDIO_Transfer_Type"]
    pub SDIO_TransferMode: u32,
    #[doc = "< Specifies whether SDIO Data path state machine (DPSM)\nis enabled or disabled.\nThis parameter can be a value of @ref SDIO_DPSM_State"]
    pub SDIO_DPSM: u32,
}
#[test]
fn bindgen_test_layout_SDIO_DataInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SDIO_DataInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SDIO_DataInitTypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(SDIO_DataInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SDIO_DataInitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(SDIO_DataInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_DataTimeOut) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_DataInitTypeDef),
            "::",
            stringify!(SDIO_DataTimeOut)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_DataLength) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_DataInitTypeDef),
            "::",
            stringify!(SDIO_DataLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_DataBlockSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_DataInitTypeDef),
            "::",
            stringify!(SDIO_DataBlockSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_TransferDir) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_DataInitTypeDef),
            "::",
            stringify!(SDIO_TransferDir)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_TransferMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_DataInitTypeDef),
            "::",
            stringify!(SDIO_TransferMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SDIO_DPSM) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDIO_DataInitTypeDef),
            "::",
            stringify!(SDIO_DPSM)
        )
    );
}
extern "C" {
    #[doc = " @defgroup SDIO_Exported_Functions\n @{"]
    pub fn SDIO_DeInit();
}
extern "C" {
    pub fn SDIO_Init(SDIO_InitStruct: *mut SDIO_InitTypeDef);
}
extern "C" {
    pub fn SDIO_StructInit(SDIO_InitStruct: *mut SDIO_InitTypeDef);
}
extern "C" {
    pub fn SDIO_ClockCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_SetPowerState(SDIO_PowerState: u32);
}
extern "C" {
    pub fn SDIO_GetPowerState() -> u32;
}
extern "C" {
    pub fn SDIO_ITConfig(SDIO_IT: u32, NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_DMACmd(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_SendCommand(SDIO_CmdInitStruct: *mut SDIO_CmdInitTypeDef);
}
extern "C" {
    pub fn SDIO_CmdStructInit(SDIO_CmdInitStruct: *mut SDIO_CmdInitTypeDef);
}
extern "C" {
    pub fn SDIO_GetCommandResponse() -> u8;
}
extern "C" {
    pub fn SDIO_GetResponse(SDIO_RESP: u32) -> u32;
}
extern "C" {
    pub fn SDIO_DataConfig(SDIO_DataInitStruct: *mut SDIO_DataInitTypeDef);
}
extern "C" {
    pub fn SDIO_DataStructInit(SDIO_DataInitStruct: *mut SDIO_DataInitTypeDef);
}
extern "C" {
    pub fn SDIO_GetDataCounter() -> u32;
}
extern "C" {
    pub fn SDIO_ReadData() -> u32;
}
extern "C" {
    pub fn SDIO_WriteData(Data: u32);
}
extern "C" {
    pub fn SDIO_GetFIFOCount() -> u32;
}
extern "C" {
    pub fn SDIO_StartSDIOReadWait(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_StopSDIOReadWait(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_SetSDIOReadWaitMode(SDIO_ReadWaitMode: u32);
}
extern "C" {
    pub fn SDIO_SetSDIOOperation(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_SendSDIOSuspendCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_CommandCompletionCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_CEATAITCmd(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_SendCEATACmd(NewState: FunctionalState);
}
extern "C" {
    pub fn SDIO_GetFlagStatus(SDIO_FLAG: u32) -> FlagStatus;
}
extern "C" {
    pub fn SDIO_ClearFlag(SDIO_FLAG: u32);
}
extern "C" {
    pub fn SDIO_GetITStatus(SDIO_IT: u32) -> ITStatus;
}
extern "C" {
    pub fn SDIO_ClearITPendingBit(SDIO_IT: u32);
}
#[doc = " @brief  SPI Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPI_InitTypeDef {
    #[doc = "< Specifies the SPI unidirectional or bidirectional data mode.\nThis parameter can be a value of @ref SPI_data_direction"]
    pub SPI_Direction: u16,
    #[doc = "< Specifies the SPI operating mode.\nThis parameter can be a value of @ref SPI_mode"]
    pub SPI_Mode: u16,
    #[doc = "< Specifies the SPI data size.\nThis parameter can be a value of @ref SPI_data_size"]
    pub SPI_DataSize: u16,
    #[doc = "< Specifies the serial clock steady state.\nThis parameter can be a value of @ref SPI_Clock_Polarity"]
    pub SPI_CPOL: u16,
    #[doc = "< Specifies the clock active edge for the bit capture.\nThis parameter can be a value of @ref SPI_Clock_Phase"]
    pub SPI_CPHA: u16,
    #[doc = "< Specifies whether the NSS signal is managed by\nhardware (NSS pin) or by software using the SSI bit.\nThis parameter can be a value of @ref SPI_Slave_Select_management"]
    pub SPI_NSS: u16,
    #[doc = "< Specifies the Baud Rate prescaler value which will be\nused to configure the transmit and receive SCK clock.\nThis parameter can be a value of @ref SPI_BaudRate_Prescaler.\n@note The communication clock is derived from the master\nclock. The slave clock does not need to be set."]
    pub SPI_BaudRatePrescaler: u16,
    #[doc = "< Specifies whether data transfers start from MSB or LSB bit.\nThis parameter can be a value of @ref SPI_MSB_LSB_transmission"]
    pub SPI_FirstBit: u16,
    #[doc = "< Specifies the polynomial used for the CRC calculation."]
    pub SPI_CRCPolynomial: u16,
}
#[test]
fn bindgen_test_layout_SPI_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<SPI_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<SPI_InitTypeDef>(),
        18usize,
        concat!("Size of: ", stringify!(SPI_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<SPI_InitTypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(SPI_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_Direction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_Direction)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_Mode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_DataSize) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_DataSize)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_CPOL) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_CPOL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_CPHA) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_CPHA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_NSS) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_NSS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_BaudRatePrescaler) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_BaudRatePrescaler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_FirstBit) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_FirstBit)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).SPI_CRCPolynomial) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_InitTypeDef),
            "::",
            stringify!(SPI_CRCPolynomial)
        )
    );
}
#[doc = " @brief  I2S Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2S_InitTypeDef {
    #[doc = "< Specifies the I2S operating mode.\nThis parameter can be a value of @ref I2S_Mode"]
    pub I2S_Mode: u16,
    #[doc = "< Specifies the standard used for the I2S communication.\nThis parameter can be a value of @ref I2S_Standard"]
    pub I2S_Standard: u16,
    #[doc = "< Specifies the data format for the I2S communication.\nThis parameter can be a value of @ref I2S_Data_Format"]
    pub I2S_DataFormat: u16,
    #[doc = "< Specifies whether the I2S MCLK output is enabled or not.\nThis parameter can be a value of @ref I2S_MCLK_Output"]
    pub I2S_MCLKOutput: u16,
    #[doc = "< Specifies the frequency selected for the I2S communication.\nThis parameter can be a value of @ref I2S_Audio_Frequency"]
    pub I2S_AudioFreq: u32,
    #[doc = "< Specifies the idle state of the I2S clock.\nThis parameter can be a value of @ref I2S_Clock_Polarity"]
    pub I2S_CPOL: u16,
}
#[test]
fn bindgen_test_layout_I2S_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<I2S_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<I2S_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(I2S_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<I2S_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(I2S_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2S_Mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(I2S_Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2S_Standard) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(I2S_Standard)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2S_DataFormat) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(I2S_DataFormat)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2S_MCLKOutput) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(I2S_MCLKOutput)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2S_AudioFreq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(I2S_AudioFreq)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).I2S_CPOL) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_InitTypeDef),
            "::",
            stringify!(I2S_CPOL)
        )
    );
}
extern "C" {
    #[doc = " @defgroup SPI_Exported_Functions\n @{"]
    pub fn SPI_I2S_DeInit(SPIx: *mut SPI_TypeDef);
}
extern "C" {
    pub fn SPI_Init(SPIx: *mut SPI_TypeDef, SPI_InitStruct: *mut SPI_InitTypeDef);
}
extern "C" {
    pub fn I2S_Init(SPIx: *mut SPI_TypeDef, I2S_InitStruct: *mut I2S_InitTypeDef);
}
extern "C" {
    pub fn SPI_StructInit(SPI_InitStruct: *mut SPI_InitTypeDef);
}
extern "C" {
    pub fn I2S_StructInit(I2S_InitStruct: *mut I2S_InitTypeDef);
}
extern "C" {
    pub fn SPI_Cmd(SPIx: *mut SPI_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn I2S_Cmd(SPIx: *mut SPI_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn SPI_I2S_ITConfig(SPIx: *mut SPI_TypeDef, SPI_I2S_IT: u8, NewState: FunctionalState);
}
extern "C" {
    pub fn SPI_I2S_DMACmd(SPIx: *mut SPI_TypeDef, SPI_I2S_DMAReq: u16, NewState: FunctionalState);
}
extern "C" {
    pub fn SPI_I2S_SendData(SPIx: *mut SPI_TypeDef, Data: u16);
}
extern "C" {
    pub fn SPI_I2S_ReceiveData(SPIx: *mut SPI_TypeDef) -> u16;
}
extern "C" {
    pub fn SPI_NSSInternalSoftwareConfig(SPIx: *mut SPI_TypeDef, SPI_NSSInternalSoft: u16);
}
extern "C" {
    pub fn SPI_SSOutputCmd(SPIx: *mut SPI_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn SPI_DataSizeConfig(SPIx: *mut SPI_TypeDef, SPI_DataSize: u16);
}
extern "C" {
    pub fn SPI_TransmitCRC(SPIx: *mut SPI_TypeDef);
}
extern "C" {
    pub fn SPI_CalculateCRC(SPIx: *mut SPI_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn SPI_GetCRC(SPIx: *mut SPI_TypeDef, SPI_CRC: u8) -> u16;
}
extern "C" {
    pub fn SPI_GetCRCPolynomial(SPIx: *mut SPI_TypeDef) -> u16;
}
extern "C" {
    pub fn SPI_BiDirectionalLineConfig(SPIx: *mut SPI_TypeDef, SPI_Direction: u16);
}
extern "C" {
    pub fn SPI_I2S_GetFlagStatus(SPIx: *mut SPI_TypeDef, SPI_I2S_FLAG: u16) -> FlagStatus;
}
extern "C" {
    pub fn SPI_I2S_ClearFlag(SPIx: *mut SPI_TypeDef, SPI_I2S_FLAG: u16);
}
extern "C" {
    pub fn SPI_I2S_GetITStatus(SPIx: *mut SPI_TypeDef, SPI_I2S_IT: u8) -> ITStatus;
}
extern "C" {
    pub fn SPI_I2S_ClearITPendingBit(SPIx: *mut SPI_TypeDef, SPI_I2S_IT: u8);
}
#[doc = " @brief  TIM Time Base Init structure definition\n @note   This structure is used with all TIMx except for TIM6 and TIM7."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_TimeBaseInitTypeDef {
    #[doc = "< Specifies the prescaler value used to divide the TIM clock.\nThis parameter can be a number between 0x0000 and 0xFFFF"]
    pub TIM_Prescaler: u16,
    #[doc = "< Specifies the counter mode.\nThis parameter can be a value of @ref TIM_Counter_Mode"]
    pub TIM_CounterMode: u16,
    #[doc = "< Specifies the period value to be loaded into the active\nAuto-Reload Register at the next update event.\nThis parameter must be a number between 0x0000 and 0xFFFF."]
    pub TIM_Period: u16,
    #[doc = "< Specifies the clock division.\nThis parameter can be a value of @ref TIM_Clock_Division_CKD"]
    pub TIM_ClockDivision: u16,
    #[doc = "< Specifies the repetition counter value. Each time the RCR downcounter\nreaches zero, an update event is generated and counting restarts\nfrom the RCR value (N).\nThis means in PWM mode that (N+1) corresponds to:\n- the number of PWM periods in edge-aligned mode\n- the number of half PWM period in center-aligned mode\nThis parameter must be a number between 0x00 and 0xFF.\n@note This parameter is valid only for TIM1 and TIM8."]
    pub TIM_RepetitionCounter: u8,
}
#[test]
fn bindgen_test_layout_TIM_TimeBaseInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_TimeBaseInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_TimeBaseInitTypeDef>(),
        10usize,
        concat!("Size of: ", stringify!(TIM_TimeBaseInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_TimeBaseInitTypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(TIM_TimeBaseInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_Prescaler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TimeBaseInitTypeDef),
            "::",
            stringify!(TIM_Prescaler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_CounterMode) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TimeBaseInitTypeDef),
            "::",
            stringify!(TIM_CounterMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_Period) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TimeBaseInitTypeDef),
            "::",
            stringify!(TIM_Period)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_ClockDivision) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TimeBaseInitTypeDef),
            "::",
            stringify!(TIM_ClockDivision)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_RepetitionCounter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_TimeBaseInitTypeDef),
            "::",
            stringify!(TIM_RepetitionCounter)
        )
    );
}
#[doc = " @brief  TIM Output Compare Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_OCInitTypeDef {
    #[doc = "< Specifies the TIM mode.\nThis parameter can be a value of @ref TIM_Output_Compare_and_PWM_modes"]
    pub TIM_OCMode: u16,
    #[doc = "< Specifies the TIM Output Compare state.\nThis parameter can be a value of @ref TIM_Output_Compare_state"]
    pub TIM_OutputState: u16,
    #[doc = "< Specifies the TIM complementary Output Compare state.\nThis parameter can be a value of @ref TIM_Output_Compare_N_state\n@note This parameter is valid only for TIM1 and TIM8."]
    pub TIM_OutputNState: u16,
    #[doc = "< Specifies the pulse value to be loaded into the Capture Compare Register.\nThis parameter can be a number between 0x0000 and 0xFFFF"]
    pub TIM_Pulse: u16,
    #[doc = "< Specifies the output polarity.\nThis parameter can be a value of @ref TIM_Output_Compare_Polarity"]
    pub TIM_OCPolarity: u16,
    #[doc = "< Specifies the complementary output polarity.\nThis parameter can be a value of @ref TIM_Output_Compare_N_Polarity\n@note This parameter is valid only for TIM1 and TIM8."]
    pub TIM_OCNPolarity: u16,
    #[doc = "< Specifies the TIM Output Compare pin state during Idle state.\nThis parameter can be a value of @ref TIM_Output_Compare_Idle_State\n@note This parameter is valid only for TIM1 and TIM8."]
    pub TIM_OCIdleState: u16,
    #[doc = "< Specifies the TIM Output Compare pin state during Idle state.\nThis parameter can be a value of @ref TIM_Output_Compare_N_Idle_State\n@note This parameter is valid only for TIM1 and TIM8."]
    pub TIM_OCNIdleState: u16,
}
#[test]
fn bindgen_test_layout_TIM_OCInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_OCInitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_OCInitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(TIM_OCInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_OCInitTypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(TIM_OCInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OCMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OCInitTypeDef),
            "::",
            stringify!(TIM_OCMode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OutputState) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OCInitTypeDef),
            "::",
            stringify!(TIM_OutputState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OutputNState) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OCInitTypeDef),
            "::",
            stringify!(TIM_OutputNState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_Pulse) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OCInitTypeDef),
            "::",
            stringify!(TIM_Pulse)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OCPolarity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OCInitTypeDef),
            "::",
            stringify!(TIM_OCPolarity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OCNPolarity) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OCInitTypeDef),
            "::",
            stringify!(TIM_OCNPolarity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OCIdleState) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OCInitTypeDef),
            "::",
            stringify!(TIM_OCIdleState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OCNIdleState) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_OCInitTypeDef),
            "::",
            stringify!(TIM_OCNIdleState)
        )
    );
}
#[doc = " @brief  TIM Input Capture Init structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_ICInitTypeDef {
    #[doc = "< Specifies the TIM channel.\nThis parameter can be a value of @ref TIM_Channel"]
    pub TIM_Channel: u16,
    #[doc = "< Specifies the active edge of the input signal.\nThis parameter can be a value of @ref TIM_Input_Capture_Polarity"]
    pub TIM_ICPolarity: u16,
    #[doc = "< Specifies the input.\nThis parameter can be a value of @ref TIM_Input_Capture_Selection"]
    pub TIM_ICSelection: u16,
    #[doc = "< Specifies the Input Capture Prescaler.\nThis parameter can be a value of @ref TIM_Input_Capture_Prescaler"]
    pub TIM_ICPrescaler: u16,
    #[doc = "< Specifies the input capture filter.\nThis parameter can be a number between 0x0 and 0xF"]
    pub TIM_ICFilter: u16,
}
#[test]
fn bindgen_test_layout_TIM_ICInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_ICInitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_ICInitTypeDef>(),
        10usize,
        concat!("Size of: ", stringify!(TIM_ICInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_ICInitTypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(TIM_ICInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_Channel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ICInitTypeDef),
            "::",
            stringify!(TIM_Channel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_ICPolarity) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ICInitTypeDef),
            "::",
            stringify!(TIM_ICPolarity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_ICSelection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ICInitTypeDef),
            "::",
            stringify!(TIM_ICSelection)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_ICPrescaler) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ICInitTypeDef),
            "::",
            stringify!(TIM_ICPrescaler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_ICFilter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_ICInitTypeDef),
            "::",
            stringify!(TIM_ICFilter)
        )
    );
}
#[doc = " @brief  BDTR structure definition\n @note   This structure is used only with TIM1 and TIM8."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TIM_BDTRInitTypeDef {
    #[doc = "< Specifies the Off-State selection used in Run mode.\nThis parameter can be a value of @ref OSSR_Off_State_Selection_for_Run_mode_state"]
    pub TIM_OSSRState: u16,
    #[doc = "< Specifies the Off-State used in Idle state.\nThis parameter can be a value of @ref OSSI_Off_State_Selection_for_Idle_mode_state"]
    pub TIM_OSSIState: u16,
    #[doc = "< Specifies the LOCK level parameters.\nThis parameter can be a value of @ref Lock_level"]
    pub TIM_LOCKLevel: u16,
    #[doc = "< Specifies the delay time between the switching-off and the\nswitching-on of the outputs.\nThis parameter can be a number between 0x00 and 0xFF"]
    pub TIM_DeadTime: u16,
    #[doc = "< Specifies whether the TIM Break input is enabled or not.\nThis parameter can be a value of @ref Break_Input_enable_disable"]
    pub TIM_Break: u16,
    #[doc = "< Specifies the TIM Break Input pin polarity.\nThis parameter can be a value of @ref Break_Polarity"]
    pub TIM_BreakPolarity: u16,
    #[doc = "< Specifies whether the TIM Automatic Output feature is enabled or not.\nThis parameter can be a value of @ref TIM_AOE_Bit_Set_Reset"]
    pub TIM_AutomaticOutput: u16,
}
#[test]
fn bindgen_test_layout_TIM_BDTRInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<TIM_BDTRInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<TIM_BDTRInitTypeDef>(),
        14usize,
        concat!("Size of: ", stringify!(TIM_BDTRInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<TIM_BDTRInitTypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(TIM_BDTRInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OSSRState) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BDTRInitTypeDef),
            "::",
            stringify!(TIM_OSSRState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_OSSIState) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BDTRInitTypeDef),
            "::",
            stringify!(TIM_OSSIState)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_LOCKLevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BDTRInitTypeDef),
            "::",
            stringify!(TIM_LOCKLevel)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_DeadTime) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BDTRInitTypeDef),
            "::",
            stringify!(TIM_DeadTime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_Break) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BDTRInitTypeDef),
            "::",
            stringify!(TIM_Break)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_BreakPolarity) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BDTRInitTypeDef),
            "::",
            stringify!(TIM_BreakPolarity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TIM_AutomaticOutput) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TIM_BDTRInitTypeDef),
            "::",
            stringify!(TIM_AutomaticOutput)
        )
    );
}
extern "C" {
    #[doc = " @defgroup TIM_Exported_Functions\n @{"]
    pub fn TIM_DeInit(TIMx: *mut TIM_TypeDef);
}
extern "C" {
    pub fn TIM_TimeBaseInit(
        TIMx: *mut TIM_TypeDef,
        TIM_TimeBaseInitStruct: *mut TIM_TimeBaseInitTypeDef,
    );
}
extern "C" {
    pub fn TIM_OC1Init(TIMx: *mut TIM_TypeDef, TIM_OCInitStruct: *mut TIM_OCInitTypeDef);
}
extern "C" {
    pub fn TIM_OC2Init(TIMx: *mut TIM_TypeDef, TIM_OCInitStruct: *mut TIM_OCInitTypeDef);
}
extern "C" {
    pub fn TIM_OC3Init(TIMx: *mut TIM_TypeDef, TIM_OCInitStruct: *mut TIM_OCInitTypeDef);
}
extern "C" {
    pub fn TIM_OC4Init(TIMx: *mut TIM_TypeDef, TIM_OCInitStruct: *mut TIM_OCInitTypeDef);
}
extern "C" {
    pub fn TIM_ICInit(TIMx: *mut TIM_TypeDef, TIM_ICInitStruct: *mut TIM_ICInitTypeDef);
}
extern "C" {
    pub fn TIM_PWMIConfig(TIMx: *mut TIM_TypeDef, TIM_ICInitStruct: *mut TIM_ICInitTypeDef);
}
extern "C" {
    pub fn TIM_BDTRConfig(TIMx: *mut TIM_TypeDef, TIM_BDTRInitStruct: *mut TIM_BDTRInitTypeDef);
}
extern "C" {
    pub fn TIM_TimeBaseStructInit(TIM_TimeBaseInitStruct: *mut TIM_TimeBaseInitTypeDef);
}
extern "C" {
    pub fn TIM_OCStructInit(TIM_OCInitStruct: *mut TIM_OCInitTypeDef);
}
extern "C" {
    pub fn TIM_ICStructInit(TIM_ICInitStruct: *mut TIM_ICInitTypeDef);
}
extern "C" {
    pub fn TIM_BDTRStructInit(TIM_BDTRInitStruct: *mut TIM_BDTRInitTypeDef);
}
extern "C" {
    pub fn TIM_Cmd(TIMx: *mut TIM_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_CtrlPWMOutputs(TIMx: *mut TIM_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_ITConfig(TIMx: *mut TIM_TypeDef, TIM_IT: u16, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_GenerateEvent(TIMx: *mut TIM_TypeDef, TIM_EventSource: u16);
}
extern "C" {
    pub fn TIM_DMAConfig(TIMx: *mut TIM_TypeDef, TIM_DMABase: u16, TIM_DMABurstLength: u16);
}
extern "C" {
    pub fn TIM_DMACmd(TIMx: *mut TIM_TypeDef, TIM_DMASource: u16, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_InternalClockConfig(TIMx: *mut TIM_TypeDef);
}
extern "C" {
    pub fn TIM_ITRxExternalClockConfig(TIMx: *mut TIM_TypeDef, TIM_InputTriggerSource: u16);
}
extern "C" {
    pub fn TIM_TIxExternalClockConfig(
        TIMx: *mut TIM_TypeDef,
        TIM_TIxExternalCLKSource: u16,
        TIM_ICPolarity: u16,
        ICFilter: u16,
    );
}
extern "C" {
    pub fn TIM_ETRClockMode1Config(
        TIMx: *mut TIM_TypeDef,
        TIM_ExtTRGPrescaler: u16,
        TIM_ExtTRGPolarity: u16,
        ExtTRGFilter: u16,
    );
}
extern "C" {
    pub fn TIM_ETRClockMode2Config(
        TIMx: *mut TIM_TypeDef,
        TIM_ExtTRGPrescaler: u16,
        TIM_ExtTRGPolarity: u16,
        ExtTRGFilter: u16,
    );
}
extern "C" {
    pub fn TIM_ETRConfig(
        TIMx: *mut TIM_TypeDef,
        TIM_ExtTRGPrescaler: u16,
        TIM_ExtTRGPolarity: u16,
        ExtTRGFilter: u16,
    );
}
extern "C" {
    pub fn TIM_PrescalerConfig(TIMx: *mut TIM_TypeDef, Prescaler: u16, TIM_PSCReloadMode: u16);
}
extern "C" {
    pub fn TIM_CounterModeConfig(TIMx: *mut TIM_TypeDef, TIM_CounterMode: u16);
}
extern "C" {
    pub fn TIM_SelectInputTrigger(TIMx: *mut TIM_TypeDef, TIM_InputTriggerSource: u16);
}
extern "C" {
    pub fn TIM_EncoderInterfaceConfig(
        TIMx: *mut TIM_TypeDef,
        TIM_EncoderMode: u16,
        TIM_IC1Polarity: u16,
        TIM_IC2Polarity: u16,
    );
}
extern "C" {
    pub fn TIM_ForcedOC1Config(TIMx: *mut TIM_TypeDef, TIM_ForcedAction: u16);
}
extern "C" {
    pub fn TIM_ForcedOC2Config(TIMx: *mut TIM_TypeDef, TIM_ForcedAction: u16);
}
extern "C" {
    pub fn TIM_ForcedOC3Config(TIMx: *mut TIM_TypeDef, TIM_ForcedAction: u16);
}
extern "C" {
    pub fn TIM_ForcedOC4Config(TIMx: *mut TIM_TypeDef, TIM_ForcedAction: u16);
}
extern "C" {
    pub fn TIM_ARRPreloadConfig(TIMx: *mut TIM_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_SelectCOM(TIMx: *mut TIM_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_SelectCCDMA(TIMx: *mut TIM_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_CCPreloadControl(TIMx: *mut TIM_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_OC1PreloadConfig(TIMx: *mut TIM_TypeDef, TIM_OCPreload: u16);
}
extern "C" {
    pub fn TIM_OC2PreloadConfig(TIMx: *mut TIM_TypeDef, TIM_OCPreload: u16);
}
extern "C" {
    pub fn TIM_OC3PreloadConfig(TIMx: *mut TIM_TypeDef, TIM_OCPreload: u16);
}
extern "C" {
    pub fn TIM_OC4PreloadConfig(TIMx: *mut TIM_TypeDef, TIM_OCPreload: u16);
}
extern "C" {
    pub fn TIM_OC1FastConfig(TIMx: *mut TIM_TypeDef, TIM_OCFast: u16);
}
extern "C" {
    pub fn TIM_OC2FastConfig(TIMx: *mut TIM_TypeDef, TIM_OCFast: u16);
}
extern "C" {
    pub fn TIM_OC3FastConfig(TIMx: *mut TIM_TypeDef, TIM_OCFast: u16);
}
extern "C" {
    pub fn TIM_OC4FastConfig(TIMx: *mut TIM_TypeDef, TIM_OCFast: u16);
}
extern "C" {
    pub fn TIM_ClearOC1Ref(TIMx: *mut TIM_TypeDef, TIM_OCClear: u16);
}
extern "C" {
    pub fn TIM_ClearOC2Ref(TIMx: *mut TIM_TypeDef, TIM_OCClear: u16);
}
extern "C" {
    pub fn TIM_ClearOC3Ref(TIMx: *mut TIM_TypeDef, TIM_OCClear: u16);
}
extern "C" {
    pub fn TIM_ClearOC4Ref(TIMx: *mut TIM_TypeDef, TIM_OCClear: u16);
}
extern "C" {
    pub fn TIM_OC1PolarityConfig(TIMx: *mut TIM_TypeDef, TIM_OCPolarity: u16);
}
extern "C" {
    pub fn TIM_OC1NPolarityConfig(TIMx: *mut TIM_TypeDef, TIM_OCNPolarity: u16);
}
extern "C" {
    pub fn TIM_OC2PolarityConfig(TIMx: *mut TIM_TypeDef, TIM_OCPolarity: u16);
}
extern "C" {
    pub fn TIM_OC2NPolarityConfig(TIMx: *mut TIM_TypeDef, TIM_OCNPolarity: u16);
}
extern "C" {
    pub fn TIM_OC3PolarityConfig(TIMx: *mut TIM_TypeDef, TIM_OCPolarity: u16);
}
extern "C" {
    pub fn TIM_OC3NPolarityConfig(TIMx: *mut TIM_TypeDef, TIM_OCNPolarity: u16);
}
extern "C" {
    pub fn TIM_OC4PolarityConfig(TIMx: *mut TIM_TypeDef, TIM_OCPolarity: u16);
}
extern "C" {
    pub fn TIM_CCxCmd(TIMx: *mut TIM_TypeDef, TIM_Channel: u16, TIM_CCx: u16);
}
extern "C" {
    pub fn TIM_CCxNCmd(TIMx: *mut TIM_TypeDef, TIM_Channel: u16, TIM_CCxN: u16);
}
extern "C" {
    pub fn TIM_SelectOCxM(TIMx: *mut TIM_TypeDef, TIM_Channel: u16, TIM_OCMode: u16);
}
extern "C" {
    pub fn TIM_UpdateDisableConfig(TIMx: *mut TIM_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_UpdateRequestConfig(TIMx: *mut TIM_TypeDef, TIM_UpdateSource: u16);
}
extern "C" {
    pub fn TIM_SelectHallSensor(TIMx: *mut TIM_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn TIM_SelectOnePulseMode(TIMx: *mut TIM_TypeDef, TIM_OPMode: u16);
}
extern "C" {
    pub fn TIM_SelectOutputTrigger(TIMx: *mut TIM_TypeDef, TIM_TRGOSource: u16);
}
extern "C" {
    pub fn TIM_SelectSlaveMode(TIMx: *mut TIM_TypeDef, TIM_SlaveMode: u16);
}
extern "C" {
    pub fn TIM_SelectMasterSlaveMode(TIMx: *mut TIM_TypeDef, TIM_MasterSlaveMode: u16);
}
extern "C" {
    pub fn TIM_SetCounter(TIMx: *mut TIM_TypeDef, Counter: u16);
}
extern "C" {
    pub fn TIM_SetAutoreload(TIMx: *mut TIM_TypeDef, Autoreload: u16);
}
extern "C" {
    pub fn TIM_SetCompare1(TIMx: *mut TIM_TypeDef, Compare1: u16);
}
extern "C" {
    pub fn TIM_SetCompare2(TIMx: *mut TIM_TypeDef, Compare2: u16);
}
extern "C" {
    pub fn TIM_SetCompare3(TIMx: *mut TIM_TypeDef, Compare3: u16);
}
extern "C" {
    pub fn TIM_SetCompare4(TIMx: *mut TIM_TypeDef, Compare4: u16);
}
extern "C" {
    pub fn TIM_SetIC1Prescaler(TIMx: *mut TIM_TypeDef, TIM_ICPSC: u16);
}
extern "C" {
    pub fn TIM_SetIC2Prescaler(TIMx: *mut TIM_TypeDef, TIM_ICPSC: u16);
}
extern "C" {
    pub fn TIM_SetIC3Prescaler(TIMx: *mut TIM_TypeDef, TIM_ICPSC: u16);
}
extern "C" {
    pub fn TIM_SetIC4Prescaler(TIMx: *mut TIM_TypeDef, TIM_ICPSC: u16);
}
extern "C" {
    pub fn TIM_SetClockDivision(TIMx: *mut TIM_TypeDef, TIM_CKD: u16);
}
extern "C" {
    pub fn TIM_GetCapture1(TIMx: *mut TIM_TypeDef) -> u16;
}
extern "C" {
    pub fn TIM_GetCapture2(TIMx: *mut TIM_TypeDef) -> u16;
}
extern "C" {
    pub fn TIM_GetCapture3(TIMx: *mut TIM_TypeDef) -> u16;
}
extern "C" {
    pub fn TIM_GetCapture4(TIMx: *mut TIM_TypeDef) -> u16;
}
extern "C" {
    pub fn TIM_GetCounter(TIMx: *mut TIM_TypeDef) -> u16;
}
extern "C" {
    pub fn TIM_GetPrescaler(TIMx: *mut TIM_TypeDef) -> u16;
}
extern "C" {
    pub fn TIM_GetFlagStatus(TIMx: *mut TIM_TypeDef, TIM_FLAG: u16) -> FlagStatus;
}
extern "C" {
    pub fn TIM_ClearFlag(TIMx: *mut TIM_TypeDef, TIM_FLAG: u16);
}
extern "C" {
    pub fn TIM_GetITStatus(TIMx: *mut TIM_TypeDef, TIM_IT: u16) -> ITStatus;
}
extern "C" {
    pub fn TIM_ClearITPendingBit(TIMx: *mut TIM_TypeDef, TIM_IT: u16);
}
#[doc = " @brief  USART Init Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USART_InitTypeDef {
    #[doc = "< This member configures the USART communication baud rate.\nThe baud rate is computed using the following formula:\n- IntegerDivider = ((PCLKx) / (16 * (USART_InitStruct->USART_BaudRate)))\n- FractionalDivider = ((IntegerDivider - ((u32) IntegerDivider)) * 16) + 0.5"]
    pub USART_BaudRate: u32,
    #[doc = "< Specifies the number of data bits transmitted or received in a frame.\nThis parameter can be a value of @ref USART_Word_Length"]
    pub USART_WordLength: u16,
    #[doc = "< Specifies the number of stop bits transmitted.\nThis parameter can be a value of @ref USART_Stop_Bits"]
    pub USART_StopBits: u16,
    #[doc = "< Specifies the parity mode.\nThis parameter can be a value of @ref USART_Parity\n@note When parity is enabled, the computed parity is inserted\nat the MSB position of the transmitted data (9th bit when\nthe word length is set to 9 data bits; 8th bit when the\nword length is set to 8 data bits)."]
    pub USART_Parity: u16,
    #[doc = "< Specifies wether the Receive or Transmit mode is enabled or disabled.\nThis parameter can be a value of @ref USART_Mode"]
    pub USART_Mode: u16,
    #[doc = "< Specifies wether the hardware flow control mode is enabled\nor disabled.\nThis parameter can be a value of @ref USART_Hardware_Flow_Control"]
    pub USART_HardwareFlowControl: u16,
}
#[test]
fn bindgen_test_layout_USART_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USART_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USART_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(USART_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USART_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(USART_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_BaudRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(USART_BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_WordLength) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(USART_WordLength)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_StopBits) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(USART_StopBits)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_Parity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(USART_Parity)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_Mode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(USART_Mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_HardwareFlowControl) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_InitTypeDef),
            "::",
            stringify!(USART_HardwareFlowControl)
        )
    );
}
#[doc = " @brief  USART Clock Init Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USART_ClockInitTypeDef {
    #[doc = "< Specifies whether the USART clock is enabled or disabled.\nThis parameter can be a value of @ref USART_Clock"]
    pub USART_Clock: u16,
    #[doc = "< Specifies the steady state value of the serial clock.\nThis parameter can be a value of @ref USART_Clock_Polarity"]
    pub USART_CPOL: u16,
    #[doc = "< Specifies the clock transition on which the bit capture is made.\nThis parameter can be a value of @ref USART_Clock_Phase"]
    pub USART_CPHA: u16,
    #[doc = "< Specifies whether the clock pulse corresponding to the last transmitted\ndata bit (MSB) has to be output on the SCLK pin in synchronous mode.\nThis parameter can be a value of @ref USART_Last_Bit"]
    pub USART_LastBit: u16,
}
#[test]
fn bindgen_test_layout_USART_ClockInitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<USART_ClockInitTypeDef> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<USART_ClockInitTypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(USART_ClockInitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<USART_ClockInitTypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(USART_ClockInitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_Clock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_ClockInitTypeDef),
            "::",
            stringify!(USART_Clock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_CPOL) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_ClockInitTypeDef),
            "::",
            stringify!(USART_CPOL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_CPHA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_ClockInitTypeDef),
            "::",
            stringify!(USART_CPHA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).USART_LastBit) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(USART_ClockInitTypeDef),
            "::",
            stringify!(USART_LastBit)
        )
    );
}
extern "C" {
    #[doc = " @defgroup USART_Exported_Functions\n @{"]
    pub fn USART_DeInit(USARTx: *mut USART_TypeDef);
}
extern "C" {
    pub fn USART_Init(USARTx: *mut USART_TypeDef, USART_InitStruct: *mut USART_InitTypeDef);
}
extern "C" {
    pub fn USART_StructInit(USART_InitStruct: *mut USART_InitTypeDef);
}
extern "C" {
    pub fn USART_ClockInit(
        USARTx: *mut USART_TypeDef,
        USART_ClockInitStruct: *mut USART_ClockInitTypeDef,
    );
}
extern "C" {
    pub fn USART_ClockStructInit(USART_ClockInitStruct: *mut USART_ClockInitTypeDef);
}
extern "C" {
    pub fn USART_Cmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_ITConfig(USARTx: *mut USART_TypeDef, USART_IT: u16, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_DMACmd(USARTx: *mut USART_TypeDef, USART_DMAReq: u16, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_SetAddress(USARTx: *mut USART_TypeDef, USART_Address: u8);
}
extern "C" {
    pub fn USART_WakeUpConfig(USARTx: *mut USART_TypeDef, USART_WakeUp: u16);
}
extern "C" {
    pub fn USART_ReceiverWakeUpCmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_LINBreakDetectLengthConfig(
        USARTx: *mut USART_TypeDef,
        USART_LINBreakDetectLength: u16,
    );
}
extern "C" {
    pub fn USART_LINCmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_SendData(USARTx: *mut USART_TypeDef, Data: u16);
}
extern "C" {
    pub fn USART_ReceiveData(USARTx: *mut USART_TypeDef) -> u16;
}
extern "C" {
    pub fn USART_SendBreak(USARTx: *mut USART_TypeDef);
}
extern "C" {
    pub fn USART_SetGuardTime(USARTx: *mut USART_TypeDef, USART_GuardTime: u8);
}
extern "C" {
    pub fn USART_SetPrescaler(USARTx: *mut USART_TypeDef, USART_Prescaler: u8);
}
extern "C" {
    pub fn USART_SmartCardCmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_SmartCardNACKCmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_HalfDuplexCmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_OverSampling8Cmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_OneBitMethodCmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_IrDAConfig(USARTx: *mut USART_TypeDef, USART_IrDAMode: u16);
}
extern "C" {
    pub fn USART_IrDACmd(USARTx: *mut USART_TypeDef, NewState: FunctionalState);
}
extern "C" {
    pub fn USART_GetFlagStatus(USARTx: *mut USART_TypeDef, USART_FLAG: u16) -> FlagStatus;
}
extern "C" {
    pub fn USART_ClearFlag(USARTx: *mut USART_TypeDef, USART_FLAG: u16);
}
extern "C" {
    pub fn USART_GetITStatus(USARTx: *mut USART_TypeDef, USART_IT: u16) -> ITStatus;
}
extern "C" {
    pub fn USART_ClearITPendingBit(USARTx: *mut USART_TypeDef, USART_IT: u16);
}
extern "C" {
    #[doc = " @defgroup WWDG_Exported_Functions\n @{"]
    pub fn WWDG_DeInit();
}
extern "C" {
    pub fn WWDG_SetPrescaler(WWDG_Prescaler: u32);
}
extern "C" {
    pub fn WWDG_SetWindowValue(WindowValue: u8);
}
extern "C" {
    pub fn WWDG_EnableIT();
}
extern "C" {
    pub fn WWDG_SetCounter(Counter: u8);
}
extern "C" {
    pub fn WWDG_Enable(Counter: u8);
}
extern "C" {
    pub fn WWDG_GetFlagStatus() -> FlagStatus;
}
extern "C" {
    pub fn WWDG_ClearFlag();
}
#[doc = " @brief  NVIC Init Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVIC_InitTypeDef {
    #[doc = "< Specifies the IRQ channel to be enabled or disabled.\nThis parameter can be a value of @ref IRQn_Type\n(For the complete STM32 Devices IRQ Channels list, please\nrefer to stm32f10x.h file)"]
    pub NVIC_IRQChannel: u8,
    #[doc = "< Specifies the pre-emption priority for the IRQ channel\nspecified in NVIC_IRQChannel. This parameter can be a value\nbetween 0 and 15 as described in the table @ref NVIC_Priority_Table"]
    pub NVIC_IRQChannelPreemptionPriority: u8,
    #[doc = "< Specifies the subpriority level for the IRQ channel specified\nin NVIC_IRQChannel. This parameter can be a value\nbetween 0 and 15 as described in the table @ref NVIC_Priority_Table"]
    pub NVIC_IRQChannelSubPriority: u8,
    #[doc = "< Specifies whether the IRQ channel defined in NVIC_IRQChannel\nwill be enabled or disabled.\nThis parameter can be set either to ENABLE or DISABLE"]
    pub NVIC_IRQChannelCmd: FunctionalState,
}
#[test]
fn bindgen_test_layout_NVIC_InitTypeDef() {
    const UNINIT: ::core::mem::MaybeUninit<NVIC_InitTypeDef> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<NVIC_InitTypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(NVIC_InitTypeDef))
    );
    assert_eq!(
        ::core::mem::align_of::<NVIC_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(NVIC_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NVIC_IRQChannel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_InitTypeDef),
            "::",
            stringify!(NVIC_IRQChannel)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).NVIC_IRQChannelPreemptionPriority) as usize - ptr as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_InitTypeDef),
            "::",
            stringify!(NVIC_IRQChannelPreemptionPriority)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NVIC_IRQChannelSubPriority) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_InitTypeDef),
            "::",
            stringify!(NVIC_IRQChannelSubPriority)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).NVIC_IRQChannelCmd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_InitTypeDef),
            "::",
            stringify!(NVIC_IRQChannelCmd)
        )
    );
}
extern "C" {
    #[doc = " @defgroup MISC_Exported_Functions\n @{"]
    pub fn NVIC_PriorityGroupConfig(NVIC_PriorityGroup: u32);
}
extern "C" {
    pub fn NVIC_Init(NVIC_InitStruct: *mut NVIC_InitTypeDef);
}
extern "C" {
    pub fn NVIC_SetVectorTable(NVIC_VectTab: u32, Offset: u32);
}
extern "C" {
    pub fn NVIC_SystemLPConfig(LowPowerMode: u8, NewState: FunctionalState);
}
extern "C" {
    pub fn SysTick_CLKSourceConfig(SysTick_CLKSource: u32);
}
extern "C" {
    pub fn Delay_us(us: u32);
}
extern "C" {
    pub fn Delay_ms(ms: u32);
}
extern "C" {
    pub fn Delay_s(s: u32);
}
